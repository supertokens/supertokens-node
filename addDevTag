#!/bin/bash

# check if we need to merge master into this branch------------
if [[ $(git log origin/master ^HEAD) ]]; then
    echo "You need to merge master into this branch. Exiting"
    exit 1
fi

# get version------------
version=`cat package.json | grep -e '"version":'`
while IFS='"' read -ra ADDR; do
    counter=0
    for i in "${ADDR[@]}"; do
        if [ $counter == 3 ]
        then
            version=$i
        fi
        counter=$(($counter+1))
    done
done <<< "$version"

versionLock=`head -n 3 package-lock.json | grep -e '"version":'`

while IFS='"' read -ra ADDR; do
    counter=0
    for i in "${ADDR[@]}"; do
        if [ $counter == 3 ]
        then
            versionLock=$i
        fi
        counter=$(($counter+1))
    done
done <<< "$versionLock"

# check if package and package-lock versions are similar.-----------
if ! [[ $version == $versionLock ]]
then
    RED='\033[0;31m'
    NC='\033[0m' # No Color
    printf "${RED}Difference between package-lock and package version. Please run npm install. Stopping process${NC}\n"
    exit 1
fi

branch_name="$(git symbolic-ref HEAD 2>/dev/null)" ||
branch_name="(unnamed branch)"     # detached HEAD

branch_name=${branch_name##refs/heads/}

# check if branch is correct based on the version-----------

if ! [[ $version == $branch_name* ]]
then
	RED='\033[0;31m'
    NC='\033[0m' # No Color
    printf "${RED}Adding tag to wrong branch. Stopping process${NC}\n"
    exit 1
fi



git fetch --prune --prune-tags

# get current commit hash------------
if [ $# -eq 0 ]
then
	commit_hash=`git log --pretty=format:'%H' -n 1`
else
	commit_hash=$1
fi


# check if current commit already has a tag or not------------

if [[ `git tag -l --points-at $commit_hash` == "" ]]
then
	continue=1
else
	RED='\033[0;31m'
	NC='\033[0m'
	printf "${RED}This commit already has a tag. Please remove that and re-run this script${NC}\n"
	echo "git tag --delete <tagName>"
	echo "git push --delete origin <tagName>"
	exit 1
fi

# check if release version of this tag exists------------

if git rev-parse v$version >/dev/null 2>&1
then
    RED='\033[0;31m'
    NC='\033[0m'
    printf "${RED}The released version of this tag already exists${NC}\n"
    exit 1
fi

# add an empty commit if the user has not given a commit hash so that we are sure it's built------------
if [ $# -eq 0 ]
then
    npm run build-pretty
    npm run build-docs
    git add --all
    git commit --allow-empty -m"adding dev-v$version tag to this commit to ensure building"
    git push
	commit_hash=`git log --pretty=format:'%H' -n 1`
fi


# tag this commit and push it------------

git tag dev-v$version $commit_hash

git push --tags
