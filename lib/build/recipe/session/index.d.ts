import SessionRecipe from "./sessionRecipe";
import * as express from "express";
import SuperTokensError from "./error";
import SessionClass from "./sessionClass";
export default class SessionWrapper {
    static init: typeof SessionRecipe.init;
    static Error: typeof SuperTokensError;
    static SessionContainer: typeof SessionClass;
    static createNewSession(res: express.Response, userId: string, jwtPayload?: any, sessionData?: any): Promise<SessionClass>;
    static getSession(req: express.Request, res: express.Response, doAntiCsrfCheck: boolean): void;
    static refreshSession(req: express.Request, res: express.Response): void;
    static revokeAllSessionsForUser(userId: string): void;
    static getAllSessionHandlesForUser(userId: string): void;
    static revokeSession(sessionHandle: string): void;
    static revokeMultipleSessions(sessionHandles: string[]): void;
    static getSessionData(sessionHandle: string): void;
    static updateSessionData(sessionHandle: string, newSessionData: any): void;
    static getJWTPayload(sessionHandle: string): void;
    static updateJWTPayload(sessionHandle: string, newJWTPayload: any): void;
    static auth0Handler(request: express.Request, response: express.Response, next: express.NextFunction, domain: string, clientId: string, clientSecret: string, callback?: (userId: string, idToken: string, accessToken: string, refreshToken: string | undefined) => Promise<void>): void;
    static middleware: (antiCsrfCheck?: boolean | undefined) => (request: import("./types").SessionRequest, response: express.Response, next: express.NextFunction) => Promise<void>;
}
export declare let init: typeof SessionRecipe.init;
export declare let createNewSession: typeof SessionWrapper.createNewSession;
export declare let getSession: typeof SessionWrapper.getSession;
export declare let refreshSession: typeof SessionWrapper.refreshSession;
export declare let revokeAllSessionsForUser: typeof SessionWrapper.revokeAllSessionsForUser;
export declare let getAllSessionHandlesForUser: typeof SessionWrapper.getAllSessionHandlesForUser;
export declare let revokeSession: typeof SessionWrapper.revokeSession;
export declare let revokeMultipleSessions: typeof SessionWrapper.revokeMultipleSessions;
export declare let getSessionData: typeof SessionWrapper.getSessionData;
export declare let updateSessionData: typeof SessionWrapper.updateSessionData;
export declare let getJWTPayload: typeof SessionWrapper.getJWTPayload;
export declare let updateJWTPayload: typeof SessionWrapper.updateJWTPayload;
export declare let auth0Handler: typeof SessionWrapper.auth0Handler;
export declare let middleware: (antiCsrfCheck?: boolean | undefined) => (request: import("./types").SessionRequest, response: express.Response, next: express.NextFunction) => Promise<void>;
export declare let Error: typeof SuperTokensError;
export declare let SessionContainer: typeof SessionClass;
