// @ts-nocheck
// @ts-nocheck
// @ts-nocheck
// @ts-nocheck
// @ts-nocheck
// @ts-nocheck
// @ts-nocheck
// @ts-nocheck
// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/recipe/accountlinking/user/primary/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check if primary user can be created for given user id
         *      */
        get: operations["canCreatePrimaryUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/accountlinking/user/link/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check if accounts can be linked for given primary and recipe user id
         *      */
        get: operations["canLinkAccounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/accountlinking/user/primary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a primary user for given user id
         *      */
        post: operations["createPrimaryUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/accountlinking/user/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Link accounts for given primary and recipe user id
         *      */
        post: operations["linkAccounts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/accountlinking/user/unlink": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Unlink accounts for given recipe user id
         *      */
        post: operations["unlinkAccounts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/totp/device": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update the name of a TOTP device for a user.
         *      */
        put: operations["updateTotpDeviceName"];
        /** @description Add a TOTP device for a user and enable TOTP if not already enabled.
         *      */
        post: operations["createTotpDevice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/totp/device/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a list of TOTP devices for a user.
         *      */
        get: operations["getTotpDevices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/totp/device/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add a TOTP device for a user and enable TOTP if not already enabled.
         *      */
        post: operations["importTotpDevice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/totp/device/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Remove a TOTP device for a user. If all devices are removed, TOTP is disabled for the user.
         *      */
        post: operations["removeTotpDevice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/totp/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Check if a TOTP code is valid against any of the TOTP devices for a user.
         *      */
        post: operations["verifyTotpCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/totp/device/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Mark a TOTP device as verified if the given TOTP code is valid for that device.
         *      */
        post: operations["verifyTotpDevice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/userid/map": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a UserIdMapping
         *      */
        get: operations["userIdMappingGetMapping"];
        put?: never;
        /** @description Create a mapping between a SuperTokens userId and an external userId.
         *      */
        post: operations["userIdMappingCreateMapping"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/userid/map/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Delete a mapping between a SuperTokens userId and an external userId.
         *      */
        post: operations["userIdMappingRemoveMapping"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/userid/external-user-id-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update or delete externalUserIdInfo
         *      */
        put: operations["userIdMappingUpateExternalUserIdInfo"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/signinup/code/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Tries to check if the passed userInputCode+deviceId combo or the linkCode is valid
         *      */
        post: operations["passwordlessCheckCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/signinup/code/consume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Tries to consume the passed userInputCode+deviceId combo or the linkCode to sign the user in
         *      */
        post: operations["passwordlessTryUseCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/signinup/code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Starts a sign in process by requesting a linkCode and a deviceId + userInputCode combination the user can use to sign in.
         *     Passing the optional deviceId signifies a resend code flow.
         *      */
        post: operations["passwordlessStartSignIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/signinup/code/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Revokes a code by id
         *      */
        post: operations["passwordlessRevokeCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/signinup/codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists all active passwordless codes of the user
         *      */
        get: operations["passwordlessListCodes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/signinup/codes/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Revokes all codes issued for the user
         *      */
        post: operations["passwordlessRevokeAllCodesOfUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/user\u2800\u2800": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * @deprecated
         * @description Get a user's information.
         *
         *     API is tenant specific if querying by email or phone number.
         *     If querying by userId, tenantId will be ignored.
         *
         *     Note that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.
         *
         */
        get: operations["passwordlessGetUser"];
        /** @description Update a user's information.
         *     If the email or phoneNumber is set to null the previous value will be deleted. If they are not set (i.e., undefined/missing from the request), they are left as-is.
         *      */
        put: operations["passwordlessPutUser"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Signin a user with email ID and password
         *      */
        post: operations["emailPasswordSignin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Signup a user with email ID and password
         *      */
        post: operations["emailPasswordSignup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * @deprecated
         * @description Get a user's information
         *
         *     API is tenant specific if querying by email.
         *     If querying by userId, tenantId will be ignored.
         *
         */
        get: operations["emailPasswordGetUser"];
        /** @description Update a user's information
         *      */
        put: operations["emailPasswordPutUser"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/user/password/reset/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Generate a new reset password token for this user
         *      */
        post: operations["emailPasswordGetPasswordResetToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/user/password/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * @deprecated
         * @description Reset a password using password reset token
         *
         */
        post: operations["emailPasswordGetPasswordReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/user/passwordhash/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Import a user with email ID and password hash
         *      */
        post: operations["userImport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/user/password/reset/token/consume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Consume a password reset token
         *      */
        post: operations["emailPasswordResetPasswordConsumeToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/signinup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Signin/up a user
         *      */
        post: operations["thirdPartySigninup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/user\u2800": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * @deprecated
         * @description Get a user's information.
         *
         *     API is tenant specific if querying by email.
         *     If querying by userId, tenantId will be ignored.
         *
         *     Note that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.
         *
         */
        get: operations["thirdPartyGetUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/users/by-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * @deprecated
         * @description Get all users accounts associated with given email
         *
         */
        get: operations["thirdPartyGetUsersByEmail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/user/email/verify/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Generate a new email verification token for this user
         *      */
        post: operations["emailVerificationVerifyToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/user/email/verify/token/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Remove all unused email verification tokens for this user
         *      */
        post: operations["emailVerificationVerifyTokenRemove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/user/email/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Verify an email
         *      */
        post: operations["emailVerificationVerify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/user/email/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check if an email is verified
         *      */
        get: operations["emailVerificationVerifyGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/user/email/verify/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Unverify an email
         *      */
        post: operations["emailVerificationVerifyRemove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/user/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets the stored metadata object of the user
         *      */
        get: operations["userMetadataRead"];
        /** @description Updates the metadata object stored about the user by doing a shallow merge of the stored and the update JSONs
         *     and removing properties set to null on the root level of the update object. The merged object is then reserialized and stored.
         *
         *     e.g.:
         *       - stored: `{ "preferences": { "theme":"dark" }, "notifications": { "email": true }, "todos": ["example"] }`
         *
         *       - update: `{ "notifications": { "sms": true }, "todos": null }`
         *
         *       - result: `{ "preferences": { "theme":"dark" }, "notifications": { "sms": true } }`
         *      */
        put: operations["userMetadataUpdate"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/user/metadata/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Removes the entire metadata JSON stored about the user.
         *      */
        post: operations["userMetadataDelete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/user/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Creates a User Role mapping
         *      */
        put: operations["addUserRole"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/user/role/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Removes a User Role mapping
         *      */
        post: operations["removeUserRole"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/user/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrive the roles associated with the user.
         *      */
        get: operations["getUserRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/role/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrive the users associated with the role.
         *      */
        get: operations["getRoleUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Creates a role with permissions, can also be used to add permissions to a role
         *      */
        put: operations["putRole"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/role/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrive the permissions associated with a role
         *      */
        get: operations["getRolePermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/role/permissions/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Removes permissions mapped to a role, if no permissions are passed all permissions mapped to the role are removed
         *      */
        post: operations["removeRolePermissions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/permission/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrive the roles associated with the permission
         *      */
        get: operations["getPermissionRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/role/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Deletes a role
         *      */
        post: operations["removeRole"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrive all created roles
         *      */
        get: operations["getRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Session
         *      */
        post: operations["createNewSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get user and session information for a given session handle
         *      */
        get: operations["getSessionInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/session/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Delete a sesion
         *
         *     If revoking session by `userId`, the sessions are cleared across all tenants by default.
         *
         *     Note: If `revokeAcrossAllTenants` is set to `true`, this API can only be called from `public` tenant.
         *      */
        post: operations["deleteSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/session/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Delete a sesion
         *
         *     If revoking session by `userId`, the sessions are cleared across all tenants by default.
         *
         *     Note: If `revokeAcrossAllTenants` is set to `true`, this API can only be called from `public` tenant.
         *      */
        post: operations["deleteSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/session/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Verify a Session
         *      */
        post: operations["verifySession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/session/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Refresh a Session
         *      */
        post: operations["refreshSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/session/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get session handles for a user
         *
         *     By default, the session handles are fetched across all tenants. Set `fetchAcrossAllTenants` to `false` to get sessionHandles for the user for a particular tenant.
         *
         *     Note: If `fetchAcrossAllTenants` is set to `true`, this API can only be called from `public` tenant.
         *      */
        get: operations["getUserSessionHandles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/session/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get session handles for a user
         *
         *     By default, the session handles are fetched across all tenants. Set `fetchAcrossAllTenants` to `false` to get sessionHandles for the user for a particular tenant.
         *
         *     Note: If `fetchAcrossAllTenants` is set to `true`, this API can only be called from `public` tenant.
         *      */
        get: operations["getUserSessionHandles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/session/regenerate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Regenerate a session
         *      */
        post: operations["regenerateSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/session/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * @deprecated
         * @description Get session data
         *
         */
        get: operations["getSessionData"];
        /** @description Change session data
         *      */
        put: operations["putSessionData"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/jwt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a signed JWT
         *      */
        post: operations["createSignedJWT"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/jwt/jwks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * @deprecated
         * @description Retrieve JWKs for JWT verification, containing both static and dynamic keys.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @example jwt */
                    rid?: components["parameters"]["jwtRID"];
                    /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                    Authorization?: components["parameters"]["api-key"];
                    /**
                     * @description X.Y of the X.Y.Z CDI version.
                     * @example 5.2
                     */
                    "cdi-version"?: components["parameters"]["cdi-version"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieve JWKs for JWT verification, containing both static and dynamic keys. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status: "OK";
                            keys?: components["schemas"]["jwk"][];
                        };
                    };
                };
                400: components["responses"]["400"];
                404: components["responses"]["404"];
                500: components["responses"]["500"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/.well-known/jwks.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve JWKs for JWT verification, containing both static and dynamic keys.
         *      */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieve JWKs for JWT verification, containing both static and dynamic keys. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            keys: components["schemas"]["jwk"][];
                        };
                    };
                };
                400: components["responses"]["400"];
                404: components["responses"]["404"];
                500: components["responses"]["500"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/jwt/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * @deprecated
         * @description Get JWT data for a session
         *
         */
        get: operations["getJWTData"];
        /** @description Change JWT data for a session
         *      */
        put: operations["putJWTData"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/dashboard/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update a user's email or password
         *      */
        put: operations["updateDashboardUser"];
        /** @description Create a dashboard user
         *      */
        post: operations["createDashboardUser"];
        /** @description Delete a dashboard user with their userId or email
         *      */
        delete: operations["deleteDashboardUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/dashboard/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of call the dashboard users
         *      */
        get: operations["getAllDashboardUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/dashboard/session/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Verify a Dashboard user's sessionId
         *      */
        post: operations["verifyDashboardUserSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/dashboard/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Revoke a Dashboard user's session
         *      */
        delete: operations["RevokeDashboardUsersSession"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/dashboard/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Signin a Dashboard user
         *      */
        post: operations["signInDashboardUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/dashboard/user/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of the sessions for the dashboard user
         *      */
        get: operations["getAllSessionsForDashboardUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apiversion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of compatible CDI versions
         *      */
        get: operations["getApiVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get path to the loaded config file
         *      */
        get: operations["getConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return a simple hello message
         *      */
        get: operations["getHelloOnRootPath"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/hello": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return a simple hello message
         *      */
        get: operations["getHello"];
        /** @description Return a simple hello message
         *      */
        put: operations["putHello"];
        /** @description Return a simple hello message
         *      */
        post: operations["postHello"];
        /** @description Return a simple hello message
         *      */
        delete: operations["deleteHello"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/telemetry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the telemetryID if it exists
         *      */
        get: operations["getTelemetry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/users/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get number of users.
         *
         *     API is tenant specific if `includeAllTenants` is false.
         *     Else, `tenantId` is ignored.
         *      */
        get: operations["getUsersCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/count/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get number of active users.
         *      */
        get: operations["getActiveUsersCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User Pagination
         *      */
        get: operations["getUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Delete user
         *      */
        post: operations["deleteUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/search/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve available tags for search
         *      */
        get: operations["getSearchTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ee/featureflag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of the enabled enterprise features
         *      */
        get: operations["getFeatureFlag"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ee/license": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve license key
         *      */
        get: operations["getLicense"];
        /** @description Set or sync license key
         *      */
        put: operations["setLicense"];
        post?: never;
        /** @description Delete license key
         *      */
        delete: operations["deleteLicense"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get user id from email or phone number
         *      */
        get: operations["getUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/users/by-accountinfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get users by email, phoneNumber or thirdParty info
         *      */
        get: operations["getUsersByAccountInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/requests/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get requests stats for last 24 hours
         *
         *     `averageRequestsPerSecond` and `peakRequestsPerSecond` would countain `1440` values corresponding to `now - 1440 minutes` until `now - 1 minute`.
         *
         *     A value of `-1` would mean that there is no data for that minute.
         *      */
        get: operations["getRequestsStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/connectionuridomain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * @deprecated
         * @description This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.
         *
         *     Note: This deprecated API still accepts those `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs for backward compatibility.
         *
         *     Create or update a connection uri domain.
         *
         *     SuperTokens subscription license key is required, if not using the base connection uri domain.
         *
         *     This request must originate from public app and public tenant on the base
         *     connection uri domain.
         *
         *     If creating a new connection uri domain, only the login methods set to true will be enabled and rest will be disabled by default.
         *
         *     `firstFactors` and `requiredSecondaryFactors` can be set to null to remove all entries in the core, or a non empty string array to be updated in the core. Setting of empty array is disallowed.
         *
         *     Note: the create/update will fail if a login method is not enabled and a relavant factor is added to either `firstFactors` or `requiredSecondaryFactors`. For example, `emailPasswordEnabled` cannot be set to `false` if `emailpassword` is present in the `firstFactors` array.
         *
         *     If updating an existing connection uri domain,
         *     1. core will keep the existing state of login methods and only update the ones that are specified in the request body.
         *     2. Core config will be merged into existing config. To delete a key in the config, use a null value
         *
         *     Note: The core config must contain a unique connection to the storage layer, because sharing of database between 2 different connection uri domains is not allowed.
         *
         *     Note: Updation of core config is not allowed for the default connectionUriDomain. In order to update config for the default connectionUriDomain, you must edit the config.yaml or the docker env directly.
         *
         */
        put: operations["createOrUpdateConnectionURIDomainPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/connectionuridomain/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Create or update a connection uri domain.
         *
         *     SuperTokens subscription license key is required, if not using the base connection uri domain.
         *
         *     This request must originate from public app and public tenant on the base
         *     connection uri domain.
         *
         *     The `firstFactors` can be set to following values:
         *
         *     - `null`: When set to `null`, all the login methods will be available for the connection URI domain (public app, public tenant).
         *     - `[]` (empty array): No login methods will be enabled for the connection URI domain (public app, public tenant).
         *     - `['factor1', 'factor2', ...]` (non-empty array): The list of login methods to enable for the connection URI domain (public app, public tenant). For eg. if this is set to `['emailpassword', 'thirdparty']`, the users of the tenant will be able to login using emailpassword and third party providers.
         *
         *     List of built-in first factors are as follows:
         *
         *     - Email password auth: `emailpassword`
         *     - Social login / enterprise SSO auth: `thirdparty`
         *     - Passwordless:
         *       - With email OTP: `otp-email`
         *       - With SMS OTP: `otp-phone`
         *       - With email magic link: `link-email`
         *       - With SMS magic link: `link-phone`
         *
         *     If first factors are not specified while creating a new connection uri domain, all the login methods will be enabled by default.
         *
         *     The `requiredSecondaryFactors` can be set to following values:
         *     - `null`: When set to `null`, no secondary factors will be required for the users of the connection URI domain (public app, public tenant).
         *     - `['factor1', 'factor2', ...]` (non-empty array): The list of factors that the users of the connection URI domain (public app, public tenant) must complete post the first factor login. For eg. if this is set to `['otp-phone', 'totp']`, the users of the tenant will be required to complete either phone OTP or TOTP post the first factor login.
         *
         *     List of built-in secondary factors are as follows:
         *
         *     - Email password auth: `emailpassword`
         *     - Social login / enterprise SSO auth: `thirdparty`
         *     - Passwordless:
         *       - With email OTP: `otp-email`
         *       - With SMS OTP: `otp-phone`
         *       - With email magic link: `link-email`
         *       - With SMS magic link: `link-phone`
         *     - Time based OTP: `totp`
         *
         *     If updating an existing connection uri domain,
         *     1. core will keep the existing state of login methods and only update the ones that are specified in the request body.
         *     2. Core config will be merged into existing config. To delete a key in the config, use a null value
         *
         *     Note: The core config must contain a unique connection to the storage layer, because sharing of database between 2 different connection uri domains is not allowed.
         *
         *     Note: Updation of core config is not allowed for the default connectionUriDomain. In order to update config for the default connectionUriDomain, you must edit the config.yaml or the docker env directly.
         *      */
        put: operations["createOrUpdateConnectionURIDomainV2PUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/connectionuridomain/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Delete a connection uri domain.
         *
         *     Deletion of base connection uri domain is not allowed.
         *
         *     The request must originate from base connection uri domain and public app and tenant.
         *
         *     Note: There should be no apps or tenants (other than the public app and public tenant) belonging to the connection uri domain to be able to delete it.
         *      */
        post: operations["deleteConnectionUriDomainPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/connectionuridomain/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * @deprecated
         * @description This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.
         *
         *     Note: This deprecated API still returns `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` values for backward compatibility, and it's values are derived from the `firstFactors` and `requiredSecondaryFactors` configured for the tenant. The detailed computation of the values as per CDI version is described here: https://github.com/supertokens/supertokens-core/issues/979#issuecomment-2099971371
         *
         *     Get a list of all connection uri domains.
         *
         *     Request must originate from base connection uri domain and public app and tenant.
         *
         */
        get: operations["connectionUriDomainListGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/connectionuridomain/list/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all connection uri domains.
         *
         *     The value of `firstFactors` can be as follows:
         *     - `null`: When set to `null`, the SDK will use firstFactors defined in the SDK
         *     - `[]` (empty array): No first factors would be enabled for the tenant
         *     - non-empty array: The first factors that are enabled for the tenant
         *
         *     Request must originate from base connection uri domain and public app and tenant.
         *      */
        get: operations["connectionUriDomainListV2GET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/app": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * @deprecated
         * @description This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.
         *
         *     Note: This deprecated API still accepts those `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs for backward compatibility.
         *
         *     Create or update an app.
         *
         *     SuperTokens subscription license key is required.
         *
         *     If creating a new app, only the login methods set to true will be enabled and rest will be disabled by default.
         *
         *     `firstFactors` and `requiredSecondaryFactors` can be set to null to remove all entries in the core, or a non empty string array to be updated in the core. Setting of empty array is disallowed.
         *
         *     Note: the create/update will fail if a login method is not enabled and a relavant factor is added to either `firstFactors` or `requiredSecondaryFactors`. For example, `emailPasswordEnabled` cannot be set to `false` if `emailpassword` is present in the `firstFactors` array.
         *
         *     If updating an existing app,
         *     1. core will keep the existing state of login methods and only update the ones that are specified in the request body.
         *     2. Core config will be merged into existing config. To delete a key in the config, use a null value
         *
         *     Note: the newly created app will use the same connection uri domain from which
         *     this request originates and the request must originate from public app and public tenant.
         *
         *     Note: Updation of core config is not allowed for the default connectionUriDomain, public app. In order to update config for the default connectionUriDomain and public app, you must edit the config.yaml or the docker env directly.
         *
         */
        put: operations["createOrUpdateAppPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/app/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Create or update an app.
         *
         *     SuperTokens subscription license key is required.
         *
         *     The `firstFactors` can be set to following values:
         *
         *     - `null`: When set to `null`, all the login methods will be available for the app (public tenant).
         *     - `[]` (empty array): No login methods will be enabled for the app (public tenant).
         *     - `['factor1', 'factor2', ...]` (non-empty array): The list of login methods to enable for the app (public tenant). For eg. if this is set to `['emailpassword', 'thirdparty']`, the users of the tenant will be able to login using emailpassword and third party providers.
         *
         *     List of built-in first factors are as follows:
         *
         *     - Email password auth: `emailpassword`
         *     - Social login / enterprise SSO auth: `thirdparty`
         *     - Passwordless:
         *       - With email OTP: `otp-email`
         *       - With SMS OTP: `otp-phone`
         *       - With email magic link: `link-email`
         *       - With SMS magic link: `link-phone`
         *
         *     If first factors are not specified while creating a new app, all the login methods will be enabled by default.
         *
         *     The `requiredSecondaryFactors` can be set to following values:
         *     - `null`: When set to `null`, no secondary factors will be required for the users of the app (public tenant).
         *     - `['factor1', 'factor2', ...]` (non-empty array): The list of factors that the users of the app (public tenant) must complete post the first factor login. For eg. if this is set to `['otp-phone', 'totp']`, the users of the tenant will be required to complete either phone OTP or TOTP post the first factor login.
         *
         *     List of built-in secondary factors are as follows:
         *
         *     - Email password auth: `emailpassword`
         *     - Social login / enterprise SSO auth: `thirdparty`
         *     - Passwordless:
         *       - With email OTP: `otp-email`
         *       - With SMS OTP: `otp-phone`
         *       - With email magic link: `link-email`
         *       - With SMS magic link: `link-phone`
         *     - Time based OTP: `totp`
         *
         *     If updating an existing app,
         *     1. core will keep the existing state of login methods and only update the ones that are specified in the request body.
         *     2. Core config will be merged into existing config. To delete a key in the config, use a null value
         *
         *     Note: the newly created app will use the same connection uri domain from which
         *     this request originates and the request must originate from public app and public tenant.
         *
         *     Note: Updation of core config is not allowed for the default connectionUriDomain, public app. In order to update config for the default connectionUriDomain and public app, you must edit the config.yaml or the docker env directly.
         *      */
        put: operations["createOrUpdateAppV2PUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/app/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Delete an app.
         *
         *     Request must originate from public app and tenant.
         *
         *     Note: No tenants (other than the public tenant) must belong to the app to be able to delete it.
         *      */
        post: operations["deleteAppPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/app/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * @deprecated
         * @description This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.
         *
         *     Note: This deprecated API still returns `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` values for backward compatibility, and it's values are derived from the `firstFactors` and `requiredSecondaryFactors` configured for the tenant. The detailed computation of the values as per CDI version is described here: https://github.com/supertokens/supertokens-core/issues/979#issuecomment-2099971371
         *
         *     Get a list of all apps in a connection uri domain.
         *
         *     Request must originate from public app and tenant.
         *
         */
        get: operations["appListGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/app/list/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all apps in a connection uri domain.
         *
         *     The value of `firstFactors` can be as follows:
         *     - `null`: When set to `null`, the SDK will use firstFactors defined in the SDK
         *     - `[]` (empty array): No first factors would be enabled for the tenant
         *     - non-empty array: The first factors that are enabled for the tenant
         *
         *     Request must originate from public app and tenant.
         *      */
        get: operations["appListV2GET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/tenant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * @deprecated
         * @description This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.
         *
         *     Note: This deprecated API still accepts those `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs for backward compatibility.
         *
         *     Creates or updates a tenant.
         *
         *     SuperTokens subscription license key is required.
         *
         *     If creating a new tenant, only the login methods set to true will be enabled and rest will be disabled by default.
         *
         *     `firstFactors` and `requiredSecondaryFactors` can be set to null to remove all entries in the core, or a non empty string array to be updated in the core. Setting of empty array is disallowed.
         *
         *     Note: the create/update will fail if a login method is not enabled and a relavant factor is added to either `firstFactors` or `requiredSecondaryFactors`. For example, `emailPasswordEnabled` cannot be set to `false` if `emailpassword` is present in the `firstFactors` array.
         *
         *     If updating an existing tenant,
         *     1. core will keep the existing state of login methods and only update the ones that are specified in the request body.
         *     2. Core config will be merged into existing config. To delete a key in the config, use a null value
         *
         *     The request must originate from public tenant, and the new tenant will use connectionUriDomain and app from which the request originates.
         *
         *     Note: Updation of core config is not allowed for the default connectionUriDomain, public app and tenant. In order to update config for the default connectionUriDomain, public app and tenant, you must edit the config.yaml or the docker env directly.
         *
         */
        put: operations["createOrUpdateTenantPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/tenant/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Creates or updates a tenant.
         *
         *     SuperTokens subscription license key is required.
         *
         *     The `firstFactors` can be set to following values:
         *
         *     - `null`: When set to `null`, all the login methods will be available for the tenant.
         *     - `[]` (empty array): No login methods will be enabled for the tenant.
         *     - `['factor1', 'factor2', ...]` (non-empty array): The list of login methods to enable for the tenant. For eg. if this is set to `['emailpassword', 'thirdparty']`, the users of the tenant will be able to login using emailpassword and third party providers.
         *
         *     List of built-in first factors are as follows:
         *
         *     - Email password auth: `emailpassword`
         *     - Social login / enterprise SSO auth: `thirdparty`
         *     - Passwordless:
         *       - With email OTP: `otp-email`
         *       - With SMS OTP: `otp-phone`
         *       - With email magic link: `link-email`
         *       - With SMS magic link: `link-phone`
         *
         *     If first factors are not specified while creating a new tenant, all the login methods will be disabled by default.
         *
         *     The `requiredSecondaryFactors` can be set to following values:
         *     - `null`: When set to `null`, no secondary factors will be required for the users of the tenant.
         *     - `['factor1', 'factor2', ...]` (non-empty array): The list of factors that the users of the tenant must complete post the first factor login. For eg. if this is set to `['otp-phone', 'totp']`, the users of the tenant will be required to complete either phone OTP or TOTP post the first factor login.
         *
         *     List of built-in secondary factors are as follows:
         *
         *     - Email password auth: `emailpassword`
         *     - Social login / enterprise SSO auth: `thirdparty`
         *     - Passwordless:
         *       - With email OTP: `otp-email`
         *       - With SMS OTP: `otp-phone`
         *       - With email magic link: `link-email`
         *       - With SMS magic link: `link-phone`
         *     - Time based OTP: `totp`
         *
         *     If updating an existing tenant,
         *     1. core will keep the existing state of login methods and only update the ones that are specified in the request body.
         *     2. Core config will be merged into existing config. To delete a key in the config, use a null value
         *
         *     The request must originate from public tenant, and the new tenant will use connectionUriDomain and app from which the request originates.
         *
         *     Note: Updation of core config is not allowed for the default connectionUriDomain, public app and tenant. In order to update config for the default connectionUriDomain, public app and tenant, you must edit the config.yaml or the docker env directly.
         *      */
        put: operations["createOrUpdateTenantV2PUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/multitenancy/tenant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * @deprecated
         * @description This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.
         *
         *     Note: This deprecated API still returns `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` values for backward compatibility, and it's values are derived from the `firstFactors` and `requiredSecondaryFactors` configured for the tenant. The detailed computation of the values as per CDI version is described here: https://github.com/supertokens/supertokens-core/issues/979#issuecomment-2099971371
         *
         *     Get a tenant config of the tenant specified by the url prefix.
         *
         *     SuperTokens subscription license key is required if querying any tenant other than the base tenant.
         *
         *     Returns recipes with their enabled flag and recipe specific configs saved in core
         *
         */
        get: operations["tenantConfigGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/multitenancy/tenant/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a tenant config of the tenant specified by the url prefix.
         *
         *     The value of `firstFactors` can be as follows:
         *     - `null`: When set to `null`, the SDK will use firstFactors defined in the SDK
         *     - `[]` (empty array): No first factors would be enabled for the tenant
         *     - non-empty array: The first factors that are enabled for the tenant
         *
         *     SuperTokens subscription license key is required if querying any tenant other than the base tenant.
         *
         *     Returns recipes with their enabled flag and recipe specific configs saved in core
         *      */
        get: operations["tenantConfigV2Get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/dashboard/tenant/core-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the core config of the tenant specified by the url prefix, along with the metadata of each of the fields.
         *      */
        get: operations["tenantCoreConfigForDashboardGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/tenant/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Delete a tenant.
         *
         *     Request must originate from public tenant.
         *      */
        post: operations["deleteTenantPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/tenant/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * @deprecated
         * @description This API is deprecated. Please use the v2 version of this API. In the v2 version of the API, the login methods are no longer enabled using the `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` inputs. Instead, they are enabled using factorIds (such as emailpassword, otp-email, etc) specified in the `firstFactors` and `requiredSecondaryFactors` inputs. Please refer [Multitenancy Docs](https://supertokens.com/docs/multitenancy/new-tenant) to know the list of factorIds available.
         *
         *     Note: This deprecated API still returns `emailPasswordEnabled`, `thirdPartyEnabled` and `passwordlessEnabled` values for backward compatibility, and it's values are derived from the `firstFactors` and `requiredSecondaryFactors` configured for the tenant. The detailed computation of the values as per CDI version is described here: https://github.com/supertokens/supertokens-core/issues/979#issuecomment-2099971371
         *
         *     Get a list of all tenants in an app.
         *
         *     Request must originate from public tenant.
         *
         */
        get: operations["tenantListGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/multitenancy/tenant/list/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all tenants in an app.
         *
         *     The value of `firstFactors` can be as follows:
         *     - `null`: When set to `null`, the SDK will use firstFactors defined in the SDK
         *     - `[]` (empty array): No first factors would be enabled for the tenant
         *     - non-empty array: The first factors that are enabled for the tenant
         *
         *     Request must originate from public tenant.
         *      */
        get: operations["tenantListV2GET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/multitenancy/config/thirdparty": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Creates or updates ThirdParty Provider Config for a tenant.
         *
         *     If `skipValidation` is set to true, the config will be saved without any validation.
         *
         *     If the config already exists for the given `tenantId` and `thirdPartyId`, the config in the core will be completely replaced with the config provided in the request body.
         *
         *     **Validations done by the core:**
         *
         *     `thirdPartyId` and `name` are required
         *
         *     Common to all providers:
         *       - `clients` list:
         *         - can be undefined or empty
         *         - if contains 1 element, clientType can be empty or undefined
         *         - if contains more than 1 element, clientType must be defined and unique
         *       - for each element in `clients`:
         *         - `clientId` must not be empty
         *
         *     Built-in provider's specific validation is invoked if the `thirdPartyId` starts with the provider's id
         *
         *     Apple (id: apple):
         *       - `clients`
         *         - if it contains elements, each of them are validated as follows:
         *           - `clientSecret` must be empty or undefined
         *           - `additionalConfig` should contain the following keys:
         *             - `keyId` must be a non empty string
         *             - `teamId` must be a non empty string
         *             - `privateKey` must be a non empty string
         *
         *     Google Workspaces (id: google-workspaces):
         *       - `clients`
         *         - if it contains elements, each of them are validated as follows:
         *           - `additionalConfig` may contain the key `hd`
         *             - `hd` is optional
         *             - if specified, it must be either `"*"`, or a valid domain
         *
         *     Boxy SAML (id: boxy-saml):
         *       - `clients`
         *         - `additionalConfig` in the each element must contain `boxyURL` and must be non-empty string
         *      */
        put: operations["createOrUpdateTenantConfigPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/multitenancy/config/thirdparty/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Delete ThirdParty Provider config for a tenant.
         *      */
        post: operations["deleteTenantConfigPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/multitenancy/tenant/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add user's association with the tenant.
         *
         *     User will be added to the tenant based on the url prefix of the request.
         *
         *     Note: To associate a user to a tenant, the tenant must be in the same database
         *     and user must already exist in the app
         *      */
        post: operations["addUserToTenant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/multitenancy/tenant/user/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Remove user's association with the tenant
         *
         *     User will be removed from the tenant based on the url prefix of the request.
         *      */
        post: operations["removeUserFromTenant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/clients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get OAuth2 Client
         *      */
        get: operations["getOAuth2Client"];
        /** @description Update OAuth2 Client
         *      */
        put: operations["updateOAuth2Client"];
        /** @description Create OAuth2 Client
         *      */
        post: operations["createOAuth2Client"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/clients/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List OAuth2 Clients
         *      */
        get: operations["listOAuth2Clients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/clients/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Remove OAuth2 Client
         *      */
        post: operations["removeOAuth2Client"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/auth/requests/consent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get OAuth2 Consent Request
         *      */
        get: operations["getOAuth2ConsentRequest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/auth/requests/consent/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Accept OAuth2 Consent Request
         *      */
        put: operations["acceptOAuth2ConsentRequest"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/auth/requests/consent/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Reject OAuth2 Consent Request
         *      */
        put: operations["rejectOAuth2ConsentRequest"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/auth/requests/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get OAuth2 Login Request
         *      */
        get: operations["getOAuth2LoginRequest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/auth/requests/login/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Accept OAuth2 Login Request
         *      */
        put: operations["acceptOAuth2LoginRequest"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/auth/requests/login/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Reject OAuth2 Login Request
         *      */
        put: operations["rejectOAuth2LoginRequest"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/auth/requests/logout/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Accept OAuth2 Logout Request
         *      */
        put: operations["acceptOAuth2LogoutRequest"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/auth/requests/logout/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Reject OAuth2 Logout Request
         *      */
        put: operations["rejectOAuth2LogoutRequest"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/session/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Revoke OAuth2 Session
         *      */
        post: operations["revokeOAuth2Session"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/token/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Revoke OAuth2 Token
         *      */
        post: operations["revokeOAuth2Token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/tokens/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Revoke OAuth2 Token
         *      */
        post: operations["revokeOAuth2Tokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get OAuth2 Auth
         *      */
        get: operations["getOAuth2Auth"];
        put?: never;
        /** @description Exchange OAuth2 Auth request for redirect or error.
         *      */
        post: operations["postOAuth2Auth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Get OAuth2 Token
         *      */
        post: operations["getOAuth2Token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/sessions/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get OAuth2 Sessions Logout
         *      */
        get: operations["getOAuth2SessionsLogout"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/oauth/introspect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Introspect OAuth2 Token
         *      */
        post: operations["introspectOAuth2Token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk-import/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Paginated API to get bulk import users
         *      */
        get: operations["getBulkImportUsers"];
        put?: never;
        /** @description Add users for bulk import. Maximum 10000 users can be added in one request.
         *      */
        post: operations["addBulkImportUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk-import/users/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Delete bulk import users by id. Multiple ids can be passed in the request body.
         *      */
        post: operations["deleteBulkImportUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/webauthn/user/credential": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the WebAuthn credential for the user. */
        get: operations["getWebAuthNCredential"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/webauthn/user/credential/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List credentials that were created by the user. */
        get: operations["listWebAuthNCredentials"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/webauthn/options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the WebAuthn options. */
        get: operations["getWebAuthNOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/webauthn/user/recover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Recover the user using the WebAuthn credential. */
        get: operations["recoverWebAuthNUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/webauthn/options/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Generate the webauthn options for registration. */
        post: operations["generateRegistrationOptions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/webauthn/options/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Generate the webauthn options for signin. */
        post: operations["generateSigninOptions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/webauthn/user/credential/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Register a new credential for the user */
        post: operations["registerWebAuthNCredential"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/webauthn/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Sign up the user using the WebAuthn credential. */
        post: operations["signUpWebAuthNUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/webauthn/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Sign in the user using the WebAuthn credential. */
        post: operations["signInWebAuthNUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/webauthn/user/recover/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Generate a token to recover the user. */
        post: operations["generateTokenForRecovery"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/webauthn/user/recover/token/consume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Consume the token to recover the user. */
        post: operations["consumeWebAuthNToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/webauthn/user/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update the email of the user. */
        put: operations["updateEmail"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipe/webauthn/user/credential/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Remove the WebAuthn credential for the user. */
        delete: operations["removeWebAuthNCredential"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/<tenantId>/recipe/webauthn/options/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Remove the WebAuthn options. */
        delete: operations["removeWebAuthNOptions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, unknown>;
export interface components {
    schemas: {
        authRecipeUser: {
            id: components["schemas"]["userId"];
            /** @example true */
            isPrimaryUser: boolean;
            tenantIds: components["schemas"]["tenantId"][];
            timeJoined: components["schemas"]["timeJoined"];
            emails: components["schemas"]["email"][];
            phoneNumbers: components["schemas"]["phoneNumber"][];
            webauthn: {
                credentialIds: string[];
            };
            thirdParty: {
                id: components["schemas"]["thirdPartyId"];
                userId: components["schemas"]["thirdPartyUserId"];
            }[];
            loginMethods: {
                tenantIds: components["schemas"]["tenantId"][];
                recipeUserId: components["schemas"]["userId"];
                /** @example true */
                verified: boolean;
                timeJoined: components["schemas"]["timeJoined"];
                recipeId: components["schemas"]["recipeId"];
                email?: components["schemas"]["email"];
                phoneNumber?: components["schemas"]["phoneNumber"];
                thirdParty?: {
                    id: components["schemas"]["thirdPartyId"];
                    userId: components["schemas"]["thirdPartyUserId"];
                };
                webauthn?: {
                    credentialIds: string[];
                };
            }[];
        };
        /** @enum {string} */
        recipeId: "emailpassword" | "passwordless" | "thirdparty" | "webauthn";
        /** @example ZTRiOTBjNz...jI5MTZlODkxw */
        token: string;
        emailVerificationVerifyTokenRequest: {
            userId?: components["schemas"]["userId"];
            email?: components["schemas"]["email"];
        };
        /** @example google */
        thirdPartyId: string;
        /** @example 106347997792363870000 */
        thirdPartyUserId: string;
        thirdPartyEmail: {
            id?: components["schemas"]["email"];
            isVerified?: components["schemas"]["isVerified"];
        };
        /** @example true */
        isVerified: boolean;
        /** @example johndoe@gmail.com */
        email: string;
        /** @example password123 */
        password: string;
        /** @example fa7a0841-b533-4478-95533-0fde890c3483 */
        userId: string;
        /** @example admin */
        role: string;
        /** @example 1623918032231 */
        timeJoined: number;
        /** @example ZmE3YTA4ND...OzE2MjM5MTgwMzIyMzE= */
        paginationToken: string;
        /** @example +14155552671 */
        phoneNumber: string;
        /**
         * @description Uniquely identifies a code
         * @example QZ0Mx9zG9cfqNXmPI0I/67r9bpKghUBDQZeMMbayi+I=
         */
        codeId: string;
        /**
         * @description A random identifier that should be stored on the device that started the sign in process.
         * @example TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk=
         */
        deviceId: string;
        /**
         * @description A random identifier that can be used to identify the login attempt/device.
         * @example kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs=
         */
        preAuthSessionId: string;
        /**
         * @description This can be used to authenticate the user when paired with the deviceId
         * @example 456123
         */
        userInputCode: string;
        /**
         * @description URL-safe string that can be used to authenticate the user, without the deviceId
         * @example b10lbT_SnDC4flA6Fn7pE5TtG5k5NfigLef4QMBeGA8
         */
        linkCode: string;
        /**
         * @description The maximum lifetime of the code in milliseconds
         * @example 900000
         */
        codeLifetime: number;
        /** @enum {string} */
        statusOK: "OK";
        /** @enum {string} */
        userVerification: "preferred" | "required" | "discouraged";
        oauthClient: {
            /** @example stcl_c6dd9189-33b8-4ec0-8aea-a0ffdaf75fcb */
            clientId?: string;
            /** @example Hello */
            clientName?: string;
            /** @example T98n1YIMWqr4wOM.~bV4HOPFmO */
            clientSecret?: string;
            /** @example [
             *       "http://localhost:3000/auth/callback/ory"
             *     ] */
            redirectUris?: string[];
            /** @example [
             *       "authorization_code",
             *       "refresh_token"
             *     ] */
            grantTypes?: string[];
            /** @example [
             *       "code",
             *       "id_token"
             *     ] */
            responseTypes?: string[];
            /** @example offline_access openid email */
            scope?: string;
            /** @example [] */
            audience?: string[];
            /** @example  */
            policyUri?: string;
            /** @example [] */
            allowedCorsOrigins?: string[];
            /** @example  */
            tosUri?: string;
            /** @example  */
            clientUri?: string;
            /** @example  */
            logoUri?: string;
            /** @example client_secret_post */
            tokenEndpointAuthMethod?: string;
            /**
             * Format: date-time
             * @example 2025-02-24T08:14:40Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @example 2025-02-24T08:14:40.362463Z
             */
            updatedAt?: string;
            /** @example [
             *       "http://localhost:3000"
             *     ] */
            postLogoutRedirectUris?: string[];
            /** @example {} */
            metadata?: {
                [key: string]: unknown;
            };
            /** @example 1h0m0s */
            authorizationCodeGrantAccessTokenLifespan?: string | null;
            /** @example 1h0m0s */
            authorizationCodeGrantIdTokenLifespan?: string | null;
            /** @example 1h0m0s */
            authorizationCodeGrantRefreshTokenLifespan?: string | null;
            /** @example 1h0m0s */
            clientCredentialsGrantAccessTokenLifespan?: string | null;
            /** @example 1h0m0s */
            implicitGrantAccessTokenLifespan?: string | null;
            /** @example 1h0m0s */
            implicitGrantIdTokenLifespan?: string | null;
            /** @example 1h0m0s */
            refreshTokenGrantIdTokenLifespan?: string | null;
            /** @example 1h0m0s */
            refreshTokenGrantAccessTokenLifespan?: string | null;
            /** @example 1h0m0s */
            refreshTokenGrantRefreshTokenLifespan?: string | null;
            /** @example false */
            enableRefreshTokenRotation?: boolean;
        };
        /**
         * @description should be a JSON object (not a JSON literal nor an array)
         * @example {
         *       "preferences": {
         *         "theme": "dark"
         *       },
         *       "notifications": {
         *         "email": true
         *       },
         *       "todos": [
         *         "example"
         *       ]
         *     }
         */
        userMetadata: Record<string, unknown>;
        /**
         * @description should be a JSON object (not a JSON literal nor an array)
         * @example {
         *       "notifications": {
         *         "sms": true
         *       },
         *       "todos": null
         *     }
         */
        userMetadataUpdate: Record<string, unknown>;
        /**
         * @description should be a JSON object (not a JSON literal nor an array)
         * @example {
         *       "test": 123
         *     }
         */
        userDataInJWT: Record<string, unknown>;
        /**
         * @description should be a JSON object (not a JSON literal nor an array)
         * @example {
         *       "test": 123
         *     }
         */
        userDataInDatabase: Record<string, unknown>;
        /** @example false */
        enableAntiCsrf: boolean;
        /** @example 68en6gd6-865b-4af6-ba00-96e5c153257d */
        handle: string;
        /** @example Error Message */
        message: string;
        session: {
            handle: components["schemas"]["handle"];
            userId: components["schemas"]["userId"];
            userDataInJWT?: components["schemas"]["userDataInJWT"];
            tenantId: components["schemas"]["tenantId"];
            recipeUserId: components["schemas"]["userId"];
        };
        cookieInfo: {
            token: components["schemas"]["token"];
            expiry: components["schemas"]["expiry"];
            createdTime: components["schemas"]["timeCreated"];
        };
        /** @example 1637262633029 */
        expiry: number;
        /** @example 1637262633029 */
        timeCreated: number;
        sessionHandles: components["schemas"]["handle"][];
        /**
         * @description The payload of the JWT, should be a JSON object.
         * @example {
         *       "custom-claim": ""
         *     }
         */
        createJWTPayload: Record<string, unknown>;
        /**
         * @description The algorithm to use when creating the JWT.
         * @enum {string}
         */
        createJWTAlgorithm: "RS256";
        /**
         * @description This is used as the value for the issuer claim in the JWT payload.
         * @example https://api.test.com/
         */
        jwksDomain: string;
        /**
         * @description Duration in seconds, used to calculate JWT expiry
         * @example 86400
         */
        jwtValidity: number;
        /** @description A JWK that can be used to verify a JWT */
        jwk: {
            alg: components["schemas"]["createJWTAlgorithm"];
            /** @example RSA */
            kty: string;
            /** @example sig */
            use: string;
            /** @description Unique identifier for the JWK */
            kid: string;
            /** @description Modulus */
            n: string;
            /** @description Exponent */
            e: string;
            /** @description X.509 Certificate Chain */
            x5c?: string[];
        };
        unauthorisedMessageResponse: {
            status: components["schemas"]["unauthorisedResponse"];
            message?: components["schemas"]["message"];
        };
        /** @enum {string} */
        helloResponse: "Hello";
        statusOKResponse: {
            /** @enum {string} */
            status: "OK";
        };
        wrongCredentialsResponse: {
            /** @enum {string} */
            status: "WRONG_CREDENTIALS_ERROR";
        };
        unknownUserIdResponse: {
            /** @enum {string} */
            status: "UNKNOWN_USER_ID_ERROR";
        };
        unknownRoleResponse: {
            /** @enum {string} */
            status: "UNKNOWN_ROLE_ERROR";
        };
        /** @enum {string} */
        tokenTheftResponse: "TOKEN_THEFT_DETECTED";
        /** @enum {string} */
        unauthorisedResponse: "UNAUTHORISED";
        /** @enum {string} */
        tryRefreshTokenResponse: "TRY_REFRESH_TOKEN";
        /** @enum {string} */
        internalError: "Internal Error";
        /** @enum {string} */
        notFound: "Not Found";
        /** @enum {string} */
        methodNotSupported: "Method not supported";
        invalidJSON: string;
        /** @enum {string} */
        requestUnauthorised: "Invalid API key";
        /** @enum {string} */
        licenseError: "License Error";
        /** @example customer1 */
        tenantId: string;
        thirdPartyProviderConfig: {
            thirdPartyId: string;
            name?: string;
            clients?: {
                clientType?: string;
                clientId: string;
                clientSecret?: string;
                scope?: string[];
                forcePKCE?: boolean;
                additionalConfig?: Record<string, unknown>;
            }[];
            authorizationEndpoint?: string;
            authorizationEndpointQueryParams?: {
                [key: string]: string | null;
            };
            tokenEndpoint?: string;
            tokenEndpointBodyParams?: {
                [key: string]: string;
            };
            userInfoEndpoint?: string;
            userInfoEndpointQueryParams?: {
                [key: string]: string | null;
            };
            userInfoEndpointHeaders?: {
                [key: string]: string | null;
            };
            jwksURI?: string;
            oidcDiscoveryEndpoint?: string;
            requireEmail?: boolean;
            userInfoMap?: {
                fromIdTokenPayload?: {
                    userId?: string;
                    email?: string;
                    emailVerified?: string;
                };
                fromUserInfoAPI?: {
                    userId?: string;
                    email?: string;
                    emailVerified?: string;
                };
            };
        };
        firstFactors: string[];
        requiredSecondaryFactors: string[];
        tenantInput: {
            emailPasswordEnabled?: boolean;
            thirdPartyEnabled?: boolean;
            passwordlessEnabled?: boolean;
            firstFactors?: components["schemas"]["firstFactors"];
            requiredSecondaryFactors?: components["schemas"]["requiredSecondaryFactors"];
            coreConfig?: Record<string, unknown>;
        };
        tenantInputV2: {
            firstFactors?: components["schemas"]["firstFactors"];
            requiredSecondaryFactors?: components["schemas"]["requiredSecondaryFactors"];
            coreConfig?: Record<string, unknown>;
        };
        tenantConfig: {
            tenantId: components["schemas"]["tenantId"];
            emailPassword: {
                enabled: boolean;
            };
            thirdParty: {
                enabled: boolean;
                providers?: components["schemas"]["thirdPartyProviderConfig"][];
            };
            passwordless: {
                enabled: boolean;
            };
            firstFactors?: components["schemas"]["firstFactors"];
            requiredSecondaryFactors?: components["schemas"]["requiredSecondaryFactors"];
            coreConfig: Record<string, unknown>;
        };
        /** @example $argon2d$v=19$m=12,t=3,p=1$aGI4enNvMmd0Zm0wMDAwMA$r6p7qbr6HD+8CD7sBi4HVw */
        passwordHash: string;
        /** @enum {string} */
        hashingAlgorithm: "argon2" | "bcrypt" | "firebase_scrypt";
        /** @example fa7a0841-b533-4478-9253-0fde890c576 */
        bulkImportUserId: string;
        /** @enum {string} */
        bulkImportUserStatus: "NEW" | "PROCESSING" | "FAILED";
        bulkImportUserRole: {
            role: components["schemas"]["role"];
            tenantIds: components["schemas"]["tenantId"][];
        };
        bulkImportTotpDevice: {
            /** @example 2PRXZWZAYYDAWCD */
            secretKey: string;
            /** @example 0 */
            skew?: number;
            /** @example 30 */
            period?: number;
            /** @example My Authy App */
            deviceName?: string;
        };
        bulkImportUserLoginMethodFields: {
            /** @description List of tenant IDs this login method is associated with */
            tenantIds?: components["schemas"]["tenantId"][];
            /** @description Indicates whether the email is verified */
            isVerified?: boolean;
            /** @description Indicates whether the login method is the primary login method */
            isPrimary?: boolean;
            /** @description Time joined in milliseconds since the epoch */
            timeJoinedInMSSinceEpoch?: number;
        };
        bulkImportUserEmailPasswordLoginMethod: components["schemas"]["bulkImportUserLoginMethodFields"] & {
            /** @example emailpassword */
            recipeId?: string;
            email: components["schemas"]["email"];
            passwordHash: components["schemas"]["passwordHash"];
            /** @example passwordExample */
            plainTextPassword?: string;
            hashingAlgorithm: components["schemas"]["hashingAlgorithm"];
        };
        addBulkImportUserLoginMethodResponse: {
            /** @example emailpassword */
            recipeId: string;
            userId: components["schemas"]["userId"];
            tenants: components["schemas"]["tenantId"][];
            email: components["schemas"]["email"];
            thirdpartyId?: components["schemas"]["thirdPartyId"];
            thirdpartyUserId?: components["schemas"]["thirdPartyUserId"];
            phoneNumber?: components["schemas"]["phoneNumber"];
        };
        bulkImportUserThirdPartyLoginMethod: components["schemas"]["bulkImportUserLoginMethodFields"] & {
            /** @example thirdparty */
            recipeId?: string;
            thirdPartyId: components["schemas"]["thirdPartyId"];
            thirdPartyUserId: components["schemas"]["thirdPartyUserId"];
        };
        bulkImportUserPasswordlessLoginMethod: (components["schemas"]["bulkImportUserLoginMethodFields"] & {
            /** @example passwordless */
            recipeId?: string;
        }) &
            (components["schemas"]["email"] | components["schemas"]["phoneNumber"]);
        bulkImportUser: {
            externalUserId?: components["schemas"]["userId"];
            userMetadata?: components["schemas"]["userMetadata"][];
            userRoles?: components["schemas"]["bulkImportUserRole"][];
            totpDevices?: components["schemas"]["bulkImportTotpDevice"][];
            loginMethods?: (
                | components["schemas"]["bulkImportUserEmailPasswordLoginMethod"]
                | components["schemas"]["bulkImportUserThirdPartyLoginMethod"]
                | components["schemas"]["bulkImportUserPasswordlessLoginMethod"]
            )[];
        };
        addBulkImportUserResponse: {
            userId?: components["schemas"]["userId"];
            loginMethods?: components["schemas"]["addBulkImportUserLoginMethodResponse"][];
        };
        bulkImportUserResponse: {
            id?: components["schemas"]["bulkImportUserId"];
            status: components["schemas"]["bulkImportUserStatus"];
            createdAt?: components["schemas"]["timeJoined"];
            updatedAt?: components["schemas"]["timeJoined"];
        } & (components["schemas"]["bulkImportUser"] & Record<string, unknown>);
        tenantConfigV2: {
            tenantId: components["schemas"]["tenantId"];
            thirdParty: {
                providers: components["schemas"]["thirdPartyProviderConfig"][];
            };
            firstFactors?: components["schemas"]["firstFactors"];
            requiredSecondaryFactors?: components["schemas"]["requiredSecondaryFactors"];
            coreConfig: Record<string, unknown>;
        };
        oauthError: {
            /** @enum {string} */
            status: "OAUTH_ERROR";
            error: string;
            errorDescription: string;
            statusCode: number;
        };
    };
    responses: {
        /** @description error code 400 */
        400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["invalidJSON"];
            };
        };
        /** @description error code 401 */
        401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["requestUnauthorised"];
            };
        };
        /** @description error code 402 */
        402: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["licenseError"];
            };
        };
        /** @description error code 404 */
        404: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["notFound"];
            };
        };
        /** @description error code 405 */
        405: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["methodNotSupported"];
            };
        };
        /** @description error code 500 */
        500: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": components["schemas"]["internalError"];
            };
        };
        /** @description return a simple hello message */
        hello: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["helloResponse"];
            };
        };
    };
    parameters: {
        /** @example emailpassword */
        rid: string;
        /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
        "api-key": string;
        /** @example thirdparty */
        thirdPartyRid: string;
        /** @example passwordless */
        passwordlessRid: string;
        /** @example emailverification */
        emailVerificationRid: string;
        /** @example multitenancy */
        multitenancyRid: string;
        /** @example oauth */
        oauthRid: string;
        /** @example usermetadata */
        userMetadataRid: string;
        /** @example userroles */
        userRolesRid: string;
        /** @example session */
        sessionRid: string;
        /** @example jwt */
        jwtRID: string;
        /** @example useridmapping */
        userIdMappingRid: string;
        /** @example dashboard */
        dashboardRid: string;
        /** @example totp */
        totpRid: string;
        /** @example accountlinking */
        accountLinkingRid: string;
        /** @example webauthn */
        webauthnRid: string;
        /**
         * @description X.Y of the X.Y.Z CDI version.
         * @example 5.2
         */
        "cdi-version": string;
        /** @example ZmE3YTA4NDEtY...MjM5MTgwMzIyMzE= */
        paginationToken: string;
        /** @example 1 */
        limit: number;
        timeJoinedOrder: "ASC" | "DESC";
        email: string;
        userId: string;
        userIdRequired: string;
        roleRequired: string;
        permissionRequired: string;
        /** @description The param should take an array of comma seperated strings */
        includeRecipeIds: string;
        bulkImportUserStatus: components["schemas"]["bulkImportUserStatus"];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, unknown>;
export interface operations {
    canCreatePrimaryUser: {
        parameters: {
            query: {
                recipeUserId: string;
            };
            header?: {
                /** @example accountlinking */
                rid?: components["parameters"]["accountLinkingRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Indicates success with the status and canCreatePrimaryUser properties */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example true */
                              wasAlreadyAPrimaryUser?: boolean;
                          }
                        | {
                              /** @enum {string} */
                              status: "ACCOUNT_INFO_ALREADY_ASSOCIATED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR";
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              primaryUserId?: string;
                              description?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "RECIPE_USER_ID_ALREADY_LINKED_WITH_PRIMARY_USER_ID_ERROR";
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              primaryUserId?: string;
                              description?: string;
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    canLinkAccounts: {
        parameters: {
            query: {
                primaryUserId: string;
                recipeUserId: string;
            };
            header?: {
                /** @example accountlinking */
                rid?: components["parameters"]["accountLinkingRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Indicates success with the status prop */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example true */
                              accountsAlreadyLinked?: boolean;
                          }
                        | {
                              /** @enum {string} */
                              status: "ACCOUNT_INFO_ALREADY_ASSOCIATED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR";
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              primaryUserId?: string;
                              description?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "RECIPE_USER_ID_ALREADY_LINKED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR";
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              primaryUserId?: string;
                              description?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "INPUT_USER_IS_NOT_A_PRIMARY_USER";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createPrimaryUser: {
        parameters: {
            query?: never;
            header?: {
                /** @example accountlinking */
                rid?: components["parameters"]["accountLinkingRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                    recipeUserId: string;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status and primaryUserId properties */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example true */
                              wasAlreadyAPrimaryUser: boolean;
                              user: components["schemas"]["authRecipeUser"];
                          }
                        | {
                              /** @enum {string} */
                              status: "ACCOUNT_INFO_ALREADY_ASSOCIATED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR";
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              primaryUserId: string;
                              description: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "RECIPE_USER_ID_ALREADY_LINKED_WITH_PRIMARY_USER_ID_ERROR";
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              primaryUserId: string;
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    linkAccounts: {
        parameters: {
            query?: never;
            header?: {
                /** @example accountlinking */
                rid?: components["parameters"]["accountLinkingRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                    primaryUserId: string;
                    /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                    recipeUserId: string;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status and accountsAlreadyLinked properties */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example true */
                              accountsAlreadyLinked?: boolean;
                              user?: components["schemas"]["authRecipeUser"];
                          }
                        | {
                              /** @enum {string} */
                              status: "ACCOUNT_INFO_ALREADY_ASSOCIATED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR";
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              primaryUserId?: string;
                              description?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "RECIPE_USER_ID_ALREADY_LINKED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR";
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              primaryUserId?: string;
                              user?: components["schemas"]["authRecipeUser"];
                              description?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "INPUT_USER_IS_NOT_A_PRIMARY_USER";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    unlinkAccounts: {
        parameters: {
            query?: never;
            header?: {
                /** @example accountlinking */
                rid?: components["parameters"]["accountLinkingRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                    recipeUserId: string;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status and accountsUnlinked properties */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        /** @example true */
                        wasRecipeUserDeleted?: boolean;
                        /** @example true */
                        wasLinked?: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    updateTotpDeviceName: {
        parameters: {
            query?: never;
            header?: {
                /** @example totp */
                rid?: components["parameters"]["totpRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId: components["schemas"]["userId"];
                    /** @example My Authy App */
                    existingDeviceName: string;
                    /** @example A better name for my TOTP device */
                    newDeviceName: string;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                          }
                        | {
                              /** @enum {string} */
                              status: "UNKNOWN_DEVICE_ERROR";
                          }
                        | {
                              /** @enum {string} */
                              status: "DEVICE_ALREADY_EXISTS_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createTotpDevice: {
        parameters: {
            query?: never;
            header?: {
                /** @example totp */
                rid?: components["parameters"]["totpRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId: components["schemas"]["userId"];
                    /** @example My Authy App */
                    deviceName?: string;
                    /** @example 0 */
                    skew: number;
                    /** @example 30 */
                    period: number;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status and secret properties */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example JBSWY3DPEHPK3PXP */
                              secret?: string;
                              /** @example d1 */
                              deviceName?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "DEVICE_ALREADY_EXISTS_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getTotpDevices: {
        parameters: {
            query: {
                userId: string;
            };
            header?: {
                /** @example totp */
                rid?: components["parameters"]["totpRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrives all TOTP devices */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        devices?: {
                            name: string;
                            period: number;
                            skew: number;
                            verified: boolean;
                        }[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    importTotpDevice: {
        parameters: {
            query?: never;
            header?: {
                /** @example totp */
                rid?: components["parameters"]["totpRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId: components["schemas"]["userId"];
                    /** @example My Authy App */
                    deviceName?: string;
                    /** @example 0 */
                    skew: number;
                    /** @example 30 */
                    period: number;
                    /** @example BSWY3DPEMOWNFUWJLDIWNDNDPONBIUFG */
                    secretKey: string;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status and secret properties */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example d1 */
                              deviceName?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "DEVICE_ALREADY_EXISTS_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    removeTotpDevice: {
        parameters: {
            query?: never;
            header?: {
                /** @example totp */
                rid?: components["parameters"]["totpRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId: components["schemas"]["userId"];
                    /** @example My Authy App */
                    deviceName: string;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        /** @example true */
                        didDeviceExist?: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    verifyTotpCode: {
        parameters: {
            query?: never;
            header?: {
                /** @example totp */
                rid?: components["parameters"]["totpRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId: components["schemas"]["userId"];
                    /** @example 123456 */
                    totp: string;
                    /** @example false */
                    allowUnverifiedDevices?: boolean;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                          }
                        | {
                              /** @enum {string} */
                              status: "INVALID_TOTP_ERROR";
                              /** @example 2 */
                              currentNumberOfFailedAttempts?: number;
                              /** @example 5 */
                              maxNumberOfFailedAttempts?: number;
                          }
                        | {
                              /** @enum {string} */
                              status: "UNKNOWN_USER_ID_ERROR";
                          }
                        | {
                              /** @enum {string} */
                              status: "LIMIT_REACHED_ERROR";
                              /** @example 90000 */
                              retryAfterMs?: number;
                              /** @example 2 */
                              currentNumberOfFailedAttempts?: number;
                              /** @example 5 */
                              maxNumberOfFailedAttempts?: number;
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    verifyTotpDevice: {
        parameters: {
            query?: never;
            header?: {
                /** @example totp */
                rid?: components["parameters"]["totpRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId: components["schemas"]["userId"];
                    /** @example My Authy App */
                    deviceName: string;
                    /** @example 123456 */
                    totp: string;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example false */
                              wasAlreadyVerified?: boolean;
                          }
                        | {
                              /** @enum {string} */
                              status: "UNKNOWN_DEVICE_ERROR";
                          }
                        | {
                              /** @enum {string} */
                              status: "INVALID_TOTP_ERROR";
                              /** @example 2 */
                              currentNumberOfFailedAttempts?: number;
                              /** @example 5 */
                              maxNumberOfFailedAttempts?: number;
                          }
                        | {
                              /** @enum {string} */
                              status: "LIMIT_REACHED_ERROR";
                              /** @example 90000 */
                              retryAfterMs?: number;
                              /** @example 2 */
                              currentNumberOfFailedAttempts?: number;
                              /** @example 5 */
                              maxNumberOfFailedAttempts?: number;
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    userIdMappingGetMapping: {
        parameters: {
            query: {
                userId: string;
                userIdType?: "SUPERTOKENS" | "EXTERNAL" | "ANY";
            };
            header?: {
                /** @example useridmapping */
                rid?: components["parameters"]["userIdMappingRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrives a userId mapping */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              superTokensUserId: components["schemas"]["userId"];
                              /** @example externalId */
                              externalUserId: string;
                              /** @example Info about external userId */
                              externalUserIdInfo?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "UNKNOWN_MAPPING_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    userIdMappingCreateMapping: {
        parameters: {
            query?: never;
            header?: {
                /** @example useridmapping */
                rid?: components["parameters"]["userIdMappingRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    superTokensUserId: components["schemas"]["userId"];
                    /** @example externalId */
                    externalUserId: string;
                    /** @example Info about external userId */
                    externalUserIdInfo?: string;
                    force?: boolean;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                          }
                        | {
                              /** @enum {string} */
                              status: "UNKNOWN_SUPERTOKENS_USER_ID_ERROR";
                          }
                        | {
                              /** @enum {string} */
                              status: "USER_ID_MAPPING_ALREADY_EXISTS_ERROR";
                              doesSuperTokensUserIdExist?: boolean;
                              doesExternalUserIdExist?: boolean;
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    userIdMappingRemoveMapping: {
        parameters: {
            query?: never;
            header?: {
                /** @example useridmapping */
                rid?: components["parameters"]["userIdMappingRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId: components["schemas"]["userId"];
                    /** @enum {string} */
                    userIdType?: "SUPERTOKENS" | "EXTERNAL" | "ANY";
                    force?: boolean;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        didMappingExist?: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    userIdMappingUpateExternalUserIdInfo: {
        parameters: {
            query?: never;
            header?: {
                /** @example useridmapping */
                rid?: components["parameters"]["userIdMappingRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId: components["schemas"]["userId"];
                    /** @enum {string} */
                    userIdType?: "SUPERTOKENS" | "EXTERNAL" | "ANY";
                    /** @example new external userId info */
                    externalUserIdInfo: string | null;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                          }
                        | {
                              /** @enum {string} */
                              status: "UNKNOWN_MAPPING_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    passwordlessCheckCode: {
        parameters: {
            query?: never;
            header?: {
                /** @example passwordless */
                rid?: components["parameters"]["passwordlessRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json":
                    | {
                          preAuthSessionId: components["schemas"]["preAuthSessionId"];
                          linkCode: components["schemas"]["linkCode"];
                      }
                    | {
                          preAuthSessionId: components["schemas"]["preAuthSessionId"];
                          deviceId: components["schemas"]["deviceId"];
                          userInputCode: components["schemas"]["userInputCode"];
                      };
            };
        };
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              consumedDevice?: {
                                  preAuthSessionId: components["schemas"]["preAuthSessionId"];
                                  /** @example 2 */
                                  failedCodeInputAttemptCount: number;
                                  email?: components["schemas"]["email"];
                                  phoneNumber?: components["schemas"]["phoneNumber"];
                              };
                          }
                        | {
                              /** @enum {string} */
                              status: "INCORRECT_USER_INPUT_CODE_ERROR" | "EXPIRED_USER_INPUT_CODE_ERROR";
                              /** @example 2 */
                              failedCodeInputAttemptCount?: number;
                              /** @example 5 */
                              maximumCodeInputAttempts?: number;
                          }
                        | {
                              /** @enum {string} */
                              status: "RESTART_FLOW_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    passwordlessTryUseCode: {
        parameters: {
            query?: never;
            header?: {
                /** @example passwordless */
                rid?: components["parameters"]["passwordlessRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json":
                    | {
                          preAuthSessionId: components["schemas"]["preAuthSessionId"];
                          linkCode: components["schemas"]["linkCode"];
                      }
                    | {
                          preAuthSessionId: components["schemas"]["preAuthSessionId"];
                          deviceId: components["schemas"]["deviceId"];
                          userInputCode: components["schemas"]["userInputCode"];
                      };
            };
        };
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example true */
                              createdNewUser?: boolean;
                              user?: components["schemas"]["authRecipeUser"];
                              recipeUserId?: components["schemas"]["userId"];
                              consumedDevice?: {
                                  preAuthSessionId: components["schemas"]["preAuthSessionId"];
                                  /** @example 2 */
                                  failedCodeInputAttemptCount: number;
                                  email?: components["schemas"]["email"];
                                  phoneNumber?: components["schemas"]["phoneNumber"];
                              };
                          }
                        | {
                              /** @enum {string} */
                              status: "INCORRECT_USER_INPUT_CODE_ERROR" | "EXPIRED_USER_INPUT_CODE_ERROR";
                              /** @example 2 */
                              failedCodeInputAttemptCount?: number;
                              /** @example 5 */
                              maximumCodeInputAttempts?: number;
                          }
                        | {
                              /** @enum {string} */
                              status: "RESTART_FLOW_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    passwordlessStartSignIn: {
        parameters: {
            query?: never;
            header?: {
                /** @example passwordless */
                rid?: components["parameters"]["passwordlessRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json":
                    | {
                          email: components["schemas"]["email"];
                          userInputCode?: components["schemas"]["userInputCode"];
                      }
                    | {
                          phoneNumber: components["schemas"]["phoneNumber"];
                          userInputCode?: components["schemas"]["userInputCode"];
                      }
                    | {
                          deviceId: components["schemas"]["deviceId"];
                          userInputCode?: components["schemas"]["userInputCode"];
                      };
            };
        };
        responses: {
            /** @description Starts the passwordless login process */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        preAuthSessionId?: components["schemas"]["preAuthSessionId"];
                        codeId?: components["schemas"]["codeId"];
                        deviceId?: components["schemas"]["deviceId"];
                        userInputCode?: components["schemas"]["userInputCode"];
                        linkCode?: components["schemas"]["linkCode"];
                        timeCreated?: components["schemas"]["timeCreated"];
                        codeLifetime?: components["schemas"]["codeLifetime"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    passwordlessRevokeCode: {
        parameters: {
            query?: never;
            header?: {
                /** @example passwordless */
                rid?: components["parameters"]["passwordlessRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json":
                    | {
                          codeId: components["schemas"]["codeId"];
                      }
                    | {
                          preAuthSessionId: components["schemas"]["preAuthSessionId"];
                      };
            };
        };
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    passwordlessListCodes: {
        parameters: {
            query?: {
                /** @description Use this parameter to get information about all devices associated with an email (without the other query params) */
                email?: string;
                /** @description Use this parameter to get information about all devices associated with a phoneNumber (without the other query params) */
                phoneNumber?: components["schemas"]["phoneNumber"];
                /** @description Use this parameter to get information about a single device (without the other query params) */
                deviceId?: components["schemas"]["deviceId"];
                /** @description Use this parameter to get information about a single device (without the other query params) */
                preAuthSessionId?: components["schemas"]["preAuthSessionId"];
            };
            header?: {
                /** @example passwordless */
                rid?: components["parameters"]["passwordlessRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all active passwordless codes of the user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        devices?: {
                            preAuthSessionId: components["schemas"]["preAuthSessionId"];
                            /** @example 2 */
                            failedCodeInputAttemptCount: number;
                            email?: components["schemas"]["email"];
                            phoneNumber?: components["schemas"]["phoneNumber"];
                            codes: {
                                codeId: components["schemas"]["codeId"];
                                timeCreated: string;
                                codeLifetime: components["schemas"]["codeLifetime"];
                            }[];
                        }[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    passwordlessRevokeAllCodesOfUser: {
        parameters: {
            query?: never;
            header?: {
                /** @example passwordless */
                rid?: components["parameters"]["passwordlessRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json":
                    | {
                          email: components["schemas"]["email"];
                      }
                    | {
                          phoneNumber: components["schemas"]["phoneNumber"];
                      };
            };
        };
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    passwordlessGetUser: {
        parameters: {
            query?: {
                userId?: components["parameters"]["userId"];
                /** @description Use exactly one of phoneNumber, email or userId */
                email?: components["schemas"]["email"];
                /** @description Use exactly one of phoneNumber, email or userId */
                phoneNumber?: components["schemas"]["phoneNumber"];
            };
            header?: {
                /** @example passwordless */
                rid?: components["parameters"]["passwordlessRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get a user's information. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              user?: components["schemas"]["authRecipeUser"];
                          }
                        | {
                              /** @enum {string} */
                              status: "UNKNOWN_USER_ID_ERROR" | "UNKNOWN_EMAIL_ERROR" | "UNKNOWN_PHONE_NUMBER_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    passwordlessPutUser: {
        parameters: {
            query?: never;
            header?: {
                /** @example passwordless */
                rid?: components["parameters"]["passwordlessRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    recipeUserId?: components["schemas"]["userId"];
                    email?: components["schemas"]["email"] & unknown;
                    phoneNumber?: components["schemas"]["phoneNumber"] & unknown;
                };
            };
        };
        responses: {
            /** @description update user's information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              /** @enum {string} */
                              status:
                                  | "OK"
                                  | "UNKNOWN_USER_ID_ERROR"
                                  | "EMAIL_ALREADY_EXISTS_ERROR"
                                  | "PHONE_NUMBER_ALREADY_EXISTS_ERROR";
                          }
                        | {
                              /** @enum {string} */
                              status: "EMAIL_CHANGE_NOT_ALLOWED_ERROR" | "PHONE_NUMBER_CHANGE_NOT_ALLOWED_ERROR";
                              reason?: string;
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    emailPasswordSignin: {
        parameters: {
            query?: never;
            header?: {
                /** @example emailpassword */
                rid?: components["parameters"]["rid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    email?: components["schemas"]["email"];
                    password?: components["schemas"]["password"];
                };
            };
        };
        responses: {
            /** @description signin response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              user?: components["schemas"]["authRecipeUser"];
                              recipeUserId?: components["schemas"]["userId"];
                          }
                        | components["schemas"]["wrongCredentialsResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    emailPasswordSignup: {
        parameters: {
            query?: never;
            header?: {
                /** @example emailpassword */
                rid?: components["parameters"]["rid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    email?: components["schemas"]["email"];
                    password?: components["schemas"]["password"];
                };
            };
        };
        responses: {
            /** @description signup response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              user?: components["schemas"]["authRecipeUser"];
                              recipeUserId?: components["schemas"]["userId"];
                          }
                        | {
                              /** @enum {string} */
                              status: "EMAIL_ALREADY_EXISTS_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    emailPasswordGetUser: {
        parameters: {
            query?: {
                /** @description use either email or userId, not both */
                email?: components["schemas"]["email"];
                /** @description use either email or userId, not both */
                userId?: components["schemas"]["userId"];
            };
            header?: {
                /** @example emailpassword */
                rid?: components["parameters"]["rid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get user's information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              user?: components["schemas"]["authRecipeUser"];
                          }
                        | {
                              /** @enum {string} */
                              status: "UNKNOWN_USER_ID_ERROR" | "UNKNOWN_EMAIL_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    emailPasswordPutUser: {
        parameters: {
            query?: never;
            header?: {
                /** @example emailpassword */
                rid?: components["parameters"]["rid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    recipeUserId?: components["schemas"]["userId"];
                    email?: components["schemas"]["email"];
                    password?: components["schemas"]["password"];
                };
            };
        };
        responses: {
            /** @description update user's information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              /** @enum {string} */
                              status: "OK" | "UNKNOWN_USER_ID_ERROR" | "EMAIL_ALREADY_EXISTS_ERROR";
                          }
                        | {
                              /** @enum {string} */
                              status: "EMAIL_CHANGE_NOT_ALLOWED_ERROR";
                              reason?: string;
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    emailPasswordGetPasswordResetToken: {
        parameters: {
            query?: never;
            header?: {
                /** @example emailpassword */
                rid?: components["parameters"]["rid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId: components["schemas"]["userId"];
                    email: components["schemas"]["email"];
                };
            };
        };
        responses: {
            /** @description Generate a new reset password token for this user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              token?: components["schemas"]["token"];
                          }
                        | components["schemas"]["unknownUserIdResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    emailPasswordGetPasswordReset: {
        parameters: {
            query?: never;
            header?: {
                /** @example emailpassword */
                rid?: components["parameters"]["rid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    method?: "token";
                    token?: components["schemas"]["token"];
                    /** @example newpassword123 */
                    newPassword?: string;
                };
            };
        };
        responses: {
            /** @description Reset a password using password reset token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              userId?: components["schemas"]["userId"];
                          }
                        | {
                              /** @enum {string} */
                              status: "RESET_PASSWORD_INVALID_TOKEN_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    userImport: {
        parameters: {
            query?: never;
            header?: {
                /** @example emailpassword */
                rid?: components["parameters"]["rid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    email?: components["schemas"]["email"];
                    passwordHash?: components["schemas"]["passwordHash"];
                    hashingAlgorithm?: components["schemas"]["hashingAlgorithm"];
                };
            };
        };
        responses: {
            /** @description import user response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        user?: components["schemas"]["authRecipeUser"];
                        didUserAlreadyExist?: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    emailPasswordResetPasswordConsumeToken: {
        parameters: {
            query?: never;
            header?: {
                /** @example emailpassword */
                rid?: components["parameters"]["rid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    token?: components["schemas"]["token"];
                };
            };
        };
        responses: {
            /** @description Consume a password reset token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              userId?: components["schemas"]["userId"];
                              email?: components["schemas"]["email"];
                          }
                        | {
                              /** @enum {string} */
                              status: "RESET_PASSWORD_INVALID_TOKEN_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    thirdPartySigninup: {
        parameters: {
            query?: never;
            header?: {
                /** @example thirdparty */
                rid?: components["parameters"]["thirdPartyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    thirdPartyId?: components["schemas"]["thirdPartyId"];
                    thirdPartyUserId?: components["schemas"]["thirdPartyUserId"];
                    email?: components["schemas"]["thirdPartyEmail"];
                };
            };
        };
        responses: {
            /** @description Signin/up a user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example true */
                              createdNewUser?: boolean;
                              user?: components["schemas"]["authRecipeUser"];
                              recipeUserId?: components["schemas"]["userId"];
                          }
                        | {
                              /** @enum {string} */
                              status: "EMAIL_CHANGE_NOT_ALLOWED_ERROR";
                              reason?: string;
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    thirdPartyGetUser: {
        parameters: {
            query?: {
                userId?: components["parameters"]["userId"];
                /** @description Either use userId or thirdPartyId and thirdPartyUserId */
                thirdPartyId?: components["schemas"]["thirdPartyId"];
                /** @description Either use userId or thirdPartyId and thirdPartyUserId */
                thirdPartyUserId?: components["schemas"]["thirdPartyUserId"];
            };
            header?: {
                /** @example thirdparty */
                rid?: components["parameters"]["thirdPartyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get a user's information. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              user?: components["schemas"]["authRecipeUser"];
                          }
                        | {
                              /** @enum {string} */
                              status: "UNKNOWN_USER_ID_ERROR" | "UNKNOWN_THIRD_PARTY_USER_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    thirdPartyGetUsersByEmail: {
        parameters: {
            query: {
                /** @description User's email */
                email: string;
            };
            header?: {
                /** @example thirdparty */
                rid?: components["parameters"]["thirdPartyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all users associated with given email */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        users?: components["schemas"]["authRecipeUser"][];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            500: components["responses"]["500"];
        };
    };
    emailVerificationVerifyToken: {
        parameters: {
            query?: never;
            header?: {
                /** @example emailverification */
                rid?: components["parameters"]["emailVerificationRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["emailVerificationVerifyTokenRequest"];
            };
        };
        responses: {
            /** @description Generate a new email verification token for this user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              token?: components["schemas"]["token"];
                          }
                        | {
                              /** @enum {string} */
                              status: "EMAIL_ALREADY_VERIFIED_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    emailVerificationVerifyTokenRemove: {
        parameters: {
            query?: never;
            header?: {
                /** @example emailverification */
                rid?: components["parameters"]["emailVerificationRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["emailVerificationVerifyTokenRequest"];
            };
        };
        responses: {
            /** @description OK response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status: "OK";
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    emailVerificationVerify: {
        parameters: {
            query?: never;
            header?: {
                /** @example emailverification */
                rid?: components["parameters"]["emailVerificationRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    method?: "token";
                    token?: components["schemas"]["token"];
                };
            };
        };
        responses: {
            /** @description Verify an email */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              userId?: components["schemas"]["userId"];
                              email?: components["schemas"]["email"];
                          }
                        | {
                              /** @enum {string} */
                              status: "EMAIL_VERIFICATION_INVALID_TOKEN_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    emailVerificationVerifyGet: {
        parameters: {
            query?: {
                userId?: components["parameters"]["userId"];
                email?: components["parameters"]["email"];
            };
            header?: {
                /** @example emailverification */
                rid?: components["parameters"]["emailVerificationRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Verify an email */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        isVerified?: components["schemas"]["isVerified"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    emailVerificationVerifyRemove: {
        parameters: {
            query?: never;
            header?: {
                /** @example emailverification */
                rid?: components["parameters"]["emailVerificationRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["emailVerificationVerifyTokenRequest"];
            };
        };
        responses: {
            /** @description OK response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status: "OK";
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    userMetadataRead: {
        parameters: {
            query: {
                userId: components["parameters"]["userIdRequired"];
            };
            header?: {
                /** @example usermetadata */
                rid?: components["parameters"]["userMetadataRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        metadata?: components["schemas"]["userMetadata"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    userMetadataUpdate: {
        parameters: {
            query?: never;
            header?: {
                /** @example usermetadata */
                rid?: components["parameters"]["userMetadataRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId?: components["schemas"]["userId"];
                    metadataUpdate?: components["schemas"]["userMetadataUpdate"];
                };
            };
        };
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        metadata?: components["schemas"]["userMetadata"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    userMetadataDelete: {
        parameters: {
            query?: never;
            header?: {
                /** @example usermetadata */
                rid?: components["parameters"]["userMetadataRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId?: components["schemas"]["userId"];
                };
            };
        };
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    addUserRole: {
        parameters: {
            query?: never;
            header?: {
                /** @example userroles */
                rid?: components["parameters"]["userRolesRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId: components["schemas"]["userId"];
                    role: components["schemas"]["role"];
                };
            };
        };
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example true */
                              didUserAlreadyHaveRole?: boolean;
                          }
                        | components["schemas"]["unknownRoleResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    removeUserRole: {
        parameters: {
            query?: never;
            header?: {
                /** @example userroles */
                rid?: components["parameters"]["userRolesRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId: components["schemas"]["userId"];
                    role: components["schemas"]["role"];
                };
            };
        };
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example true */
                              didUserHaveRole?: boolean;
                          }
                        | components["schemas"]["unknownRoleResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getUserRoles: {
        parameters: {
            query: {
                userId: components["parameters"]["userIdRequired"];
            };
            header?: {
                /** @example userroles */
                rid?: components["parameters"]["userRolesRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        roles?: components["schemas"]["role"][];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getRoleUsers: {
        parameters: {
            query: {
                role: components["parameters"]["roleRequired"];
            };
            header?: {
                /** @example userroles */
                rid?: components["parameters"]["userRolesRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              users?: components["schemas"]["userId"][];
                          }
                        | components["schemas"]["unknownRoleResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    putRole: {
        parameters: {
            query?: never;
            header?: {
                /** @example userroles */
                rid?: components["parameters"]["userRolesRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    role: components["schemas"]["role"];
                    permissions?: string[];
                };
            };
        };
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        /** @example true */
                        createdNewRole?: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getRolePermissions: {
        parameters: {
            query: {
                role: components["parameters"]["roleRequired"];
            };
            header?: {
                /** @example userroles */
                rid?: components["parameters"]["userRolesRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              permissions?: string[];
                          }
                        | components["schemas"]["unknownRoleResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    removeRolePermissions: {
        parameters: {
            query?: never;
            header?: {
                /** @example userroles */
                rid?: components["parameters"]["userRolesRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    role: components["schemas"]["role"];
                    permissions?: string[];
                };
            };
        };
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                          }
                        | components["schemas"]["unknownRoleResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getPermissionRoles: {
        parameters: {
            query: {
                permission: components["parameters"]["permissionRequired"];
            };
            header?: {
                /** @example userroles */
                rid?: components["parameters"]["userRolesRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        roles?: string[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    removeRole: {
        parameters: {
            query?: never;
            header?: {
                /** @example userroles */
                rid?: components["parameters"]["userRolesRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    role: components["schemas"]["role"];
                };
            };
        };
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        /** @example true */
                        didRoleExist?: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getRoles: {
        parameters: {
            query?: never;
            header?: {
                /** @example userroles */
                rid?: components["parameters"]["userRolesRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        roles?: string[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createNewSession: {
        parameters: {
            query?: never;
            header?: {
                /** @example session */
                rid?: components["parameters"]["sessionRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId?: components["schemas"]["userId"];
                    userDataInJWT?: components["schemas"]["userDataInJWT"];
                    userDataInDatabase?: components["schemas"]["userDataInDatabase"];
                    enableAntiCsrf?: components["schemas"]["enableAntiCsrf"];
                    /**
                     * @description Decides if the token should be signed with a dynamic or static key, defaults to true
                     * @example false
                     */
                    useDynamicSigningKey?: boolean;
                };
            };
        };
        responses: {
            /** @description Create a new Session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        session?: components["schemas"]["session"];
                        accessToken?: components["schemas"]["cookieInfo"];
                        refreshToken?: components["schemas"]["cookieInfo"];
                        antiCsrfToken?: components["schemas"]["token"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getSessionInfo: {
        parameters: {
            query?: {
                sessionHandle?: components["schemas"]["handle"];
            };
            header?: {
                /** @example session */
                rid?: components["parameters"]["sessionRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get user and session information for a given session handle */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              userDataInDatabase?: components["schemas"]["userDataInDatabase"];
                              userDataInJWT?: components["schemas"]["userDataInJWT"];
                              userId?: components["schemas"]["userId"];
                              expiry?: components["schemas"]["expiry"];
                              timeCreated?: components["schemas"]["timeCreated"];
                              sessionHandle?: components["schemas"]["handle"];
                              tenantId?: components["schemas"]["tenantId"];
                              recipeUserId?: components["schemas"]["userId"];
                          }
                        | components["schemas"]["unauthorisedMessageResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteSession: {
        parameters: {
            query?: never;
            header?: {
                /** @example session */
                rid?: components["parameters"]["sessionRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json":
                    | {
                          sessionHandles?: components["schemas"]["sessionHandles"];
                      }
                    | {
                          userId: components["schemas"]["userId"];
                          revokeAcrossAllTenants?: boolean;
                      };
            };
        };
        responses: {
            /** @description Delete a session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        sessionHandlesRevoked?: components["schemas"]["sessionHandles"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteSession: {
        parameters: {
            query?: never;
            header?: {
                /** @example session */
                rid?: components["parameters"]["sessionRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json":
                    | {
                          sessionHandles?: components["schemas"]["sessionHandles"];
                      }
                    | {
                          userId: components["schemas"]["userId"];
                          revokeAcrossAllTenants?: boolean;
                      };
            };
        };
        responses: {
            /** @description Delete a session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        sessionHandlesRevoked?: components["schemas"]["sessionHandles"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    verifySession: {
        parameters: {
            query?: never;
            header?: {
                /** @example session */
                rid?: components["parameters"]["sessionRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    accessToken?: components["schemas"]["token"];
                    enableAntiCsrf?: components["schemas"]["enableAntiCsrf"];
                    /** @example false */
                    doAntiCsrfCheck?: boolean;
                    /**
                     * @description Decides if we always check if the session exists in the DB or just do token validation, defaults to false.
                     * @example false
                     */
                    checkDatabase?: boolean;
                    antiCsrfToken?: components["schemas"]["token"];
                };
            };
        };
        responses: {
            /** @description Verify a session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              session?: components["schemas"]["session"];
                              accessToken?: components["schemas"]["cookieInfo"];
                          }
                        | components["schemas"]["unauthorisedMessageResponse"]
                        | {
                              status: components["schemas"]["tryRefreshTokenResponse"];
                              message?: components["schemas"]["message"];
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    refreshSession: {
        parameters: {
            query?: never;
            header?: {
                /** @example session */
                rid?: components["parameters"]["sessionRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    refreshToken: components["schemas"]["token"];
                    enableAntiCsrf: components["schemas"]["enableAntiCsrf"];
                    antiCsrfToken?: components["schemas"]["token"];
                    useDynamicSigningKey: boolean;
                };
            };
        };
        responses: {
            /** @description Refresh a session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              session?: components["schemas"]["session"];
                              accessToken?: components["schemas"]["cookieInfo"];
                              refreshToken?: components["schemas"]["cookieInfo"];
                              antiCsrfToken?: components["schemas"]["token"];
                          }
                        | {
                              status: components["schemas"]["tokenTheftResponse"];
                              session?: {
                                  handle: components["schemas"]["handle"];
                                  userId: components["schemas"]["userId"];
                                  recipeUserId: components["schemas"]["userId"];
                              };
                          }
                        | components["schemas"]["unauthorisedMessageResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getUserSessionHandles: {
        parameters: {
            query?: {
                userId?: components["parameters"]["userId"];
                fetchAcrossAllTenants?: "true" | "false";
            };
            header?: {
                /** @example session */
                rid?: components["parameters"]["sessionRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get user Session Handles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        sessionHandles?: components["schemas"]["sessionHandles"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getUserSessionHandles: {
        parameters: {
            query?: {
                userId?: components["parameters"]["userId"];
                fetchAcrossAllTenants?: "true" | "false";
            };
            header?: {
                /** @example session */
                rid?: components["parameters"]["sessionRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get user Session Handles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        sessionHandles?: components["schemas"]["sessionHandles"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    regenerateSession: {
        parameters: {
            query?: never;
            header?: {
                /** @example session */
                rid?: components["parameters"]["sessionRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    accessToken?: components["schemas"]["token"];
                    userDataInJWT?: components["schemas"]["userDataInJWT"];
                };
            };
        };
        responses: {
            /** @description Regenerate user session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              session?: components["schemas"]["session"];
                              accessToken?: components["schemas"]["cookieInfo"];
                          }
                        | components["schemas"]["unauthorisedMessageResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getSessionData: {
        parameters: {
            query?: {
                /** @description Users session handle */
                sessionHandle?: components["schemas"]["handle"];
            };
            header?: {
                /** @example session */
                rid?: components["parameters"]["sessionRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get Session Data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              userDataInDatabase?: components["schemas"]["userDataInDatabase"];
                          }
                        | components["schemas"]["unauthorisedMessageResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    putSessionData: {
        parameters: {
            query?: never;
            header?: {
                /** @example session */
                rid?: components["parameters"]["sessionRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    sessionHandle?: components["schemas"]["handle"];
                    userDataInDatabase?: components["schemas"]["userDataInDatabase"];
                };
            };
        };
        responses: {
            /** @description Change Session Data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["statusOKResponse"]
                        | components["schemas"]["unauthorisedMessageResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createSignedJWT: {
        parameters: {
            query?: never;
            header?: {
                /** @example jwt */
                rid?: components["parameters"]["jwtRID"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    payload?: components["schemas"]["createJWTPayload"];
                    algorithm?: components["schemas"]["createJWTAlgorithm"];
                    jwksDomain?: components["schemas"]["jwksDomain"];
                    validity?: components["schemas"]["jwtValidity"];
                    /**
                     * @description Decides if the token should be signed with a dynamic or static key, defaults to true
                     * @example true
                     */
                    useStaticSigningKey?: boolean;
                };
            };
        };
        responses: {
            /** @description Create a signed JWT */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c */
                              jwt?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "UNSUPPORTED_ALGORITHM_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getJWTData: {
        parameters: {
            query?: {
                /** @description Users session handle */
                sessionHandle?: components["schemas"]["handle"];
            };
            header?: {
                /** @example session */
                rid?: components["parameters"]["sessionRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get JWT Data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              userDataInJWT?: components["schemas"]["userDataInJWT"];
                          }
                        | components["schemas"]["unauthorisedMessageResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    putJWTData: {
        parameters: {
            query?: never;
            header?: {
                /** @example session */
                rid?: components["parameters"]["sessionRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    sessionHandle?: components["schemas"]["handle"];
                    userDataInJWT?: components["schemas"]["userDataInJWT"];
                };
            };
        };
        responses: {
            /** @description Change JWT Data for a session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["statusOKResponse"]
                        | components["schemas"]["unauthorisedMessageResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    updateDashboardUser: {
        parameters: {
            query?: never;
            header?: {
                /** @example dashboard */
                rid?: components["parameters"]["dashboardRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json":
                    | {
                          /** @example test@example.com */
                          email?: string;
                          /** @example password@123 */
                          newPassword?: string;
                          /** @example test2@example.com */
                          newEmail?: string;
                      }
                    | {
                          /** @example ue21r-fw32r3-d121-d1 */
                          userId?: string;
                          /** @example password@123 */
                          newPassword?: string;
                          /** @example test2@example.com */
                          newEmail?: string;
                      };
            };
        };
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              /** @enum {string} */
                              status: "OK";
                              user?: {
                                  /** @example r23r-f235th54-g3413gf-r32dr2 */
                                  userId?: string;
                                  /** @example test@example.com */
                                  email?: string;
                                  /** @example 391238234792 */
                                  timeCreated?: number;
                              };
                          }
                        | {
                              /** @enum {string} */
                              status: "EMAIL_ALREADY_EXISTS_ERROR";
                          }
                        | {
                              /** @enum {string} */
                              status: "PASSWORD_WEAK_ERROR";
                              /** @example Your password must have at least 8 characters */
                              message?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "INVALID_EMAIL_ERROR";
                          }
                        | {
                              /** @enum {string} */
                              status: "UNKNOWN_USER_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createDashboardUser: {
        parameters: {
            query?: never;
            header?: {
                /** @example dashboard */
                rid?: components["parameters"]["dashboardRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example test@example.com */
                    email?: string;
                    /** @example password@123 */
                    password?: string;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              /** @enum {string} */
                              status: "OK";
                              user?: {
                                  /** @example example-userid */
                                  userId?: string;
                                  /** @example test@example.com */
                                  email?: string;
                                  /** @example 1231321231 */
                                  timeCreated?: number;
                              };
                          }
                        | {
                              /** @enum {string} */
                              status: "EMAIL_ALREADY_EXISTS_ERROR";
                          }
                        | {
                              /** @enum {string} */
                              status: "PASSWORD_WEAK_ERROR";
                              /** @example Your password must have at least 8 characters */
                              message?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "INVALID_EMAIL_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            /** @description Indicates ayment required */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status: "USER_LIMIT_REACHED_ERROR";
                        /** @example You have reached the free limit for creating users, please purchase the dashboard feature to create new users */
                        message?: string;
                    };
                };
            };
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteDashboardUser: {
        parameters: {
            query?: {
                email?: string;
                userId?: string;
            };
            header?: {
                /** @example dashboard */
                rid?: components["parameters"]["dashboardRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        didUserExist?: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getAllDashboardUsers: {
        parameters: {
            query?: never;
            header?: {
                /** @example dashboard */
                rid?: components["parameters"]["dashboardRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get a list of dashboard users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status: "OK";
                        users?: {
                            /** @example test@example.com */
                            email?: string;
                            /** @example uf2323-f223r233-f23-f23-f2f32 */
                            userId?: string;
                            /** @example 16382348324 */
                            timeCreated?: number;
                            /** @example false */
                            isSuspended?: boolean;
                        }[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    verifyDashboardUserSession: {
        parameters: {
            query?: never;
            header?: {
                /** @example dashboard */
                rid?: components["parameters"]["dashboardRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example rf32f-f32342f-32f-323r2f3-23 */
                    sessionId?: string;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              /** @enum {string} */
                              status: "OK";
                              email?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "USER_SUSPENDED_ERROR";
                              /** @example You have crossed the free dashboard user limit. Please purchase the dashboard feature or login with a valid user account */
                              message?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "INVAlID_SESSION_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    RevokeDashboardUsersSession: {
        parameters: {
            query?: {
                sessionId?: string;
            };
            header?: {
                /** @example dashboard */
                rid?: components["parameters"]["dashboardRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    signInDashboardUser: {
        parameters: {
            query?: never;
            header?: {
                /** @example dashboard */
                rid?: components["parameters"]["dashboardRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example test@example.com */
                    email?: string;
                    /** @example password@123 */
                    password?: string;
                };
            };
        };
        responses: {
            /** @description Indicates success with the status property */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              /** @enum {string} */
                              status: "OK";
                              /** @example null */
                              sessionId?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "USER_SUSPENDED_ERROR";
                              /** @example You have crossed the free dashboard user limit. Please purchase the dashboard feature or login with a valid user account */
                              message?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "INVAlID_CREDENTIALS_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getAllSessionsForDashboardUser: {
        parameters: {
            query?: {
                userId?: string;
            };
            header?: {
                /** @example dashboard */
                rid?: components["parameters"]["dashboardRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get a list of sessions for dashboard user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        sessions?: {
                            userId?: components["schemas"]["userId"];
                            /** @example fni29f-f23f23-f2fq32qt-h35evf */
                            sessionId?: string;
                            /** @example 16382348324 */
                            timeCreated?: number;
                            /** @example 16382348324 */
                            expiry?: number;
                        }[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getApiVersion: {
        parameters: {
            query?: {
                websiteDomain?: string;
                apiDomain?: string;
            };
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get api version */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        versions?: string[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getConfig: {
        parameters: {
            query?: {
                pid?: string;
            };
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get api version */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example /usr/lib/supertokens/config.yaml */
                              path?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "NOT_ALLOWED";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getHelloOnRootPath: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["hello"];
            500: components["responses"]["500"];
        };
    };
    getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["hello"];
            500: components["responses"]["500"];
        };
    };
    putHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["hello"];
            500: components["responses"]["500"];
        };
    };
    postHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["hello"];
            500: components["responses"]["500"];
        };
    };
    deleteHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["hello"];
            500: components["responses"]["500"];
        };
    };
    getTelemetry: {
        parameters: {
            query?: never;
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the telemetryID if it exists */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              /** @enum {boolean} */
                              exists: true;
                              /** @example 99c87c72-1807-22d-9b39-7a88f95re56c */
                              telemetryId: string;
                          }
                        | {
                              /** @enum {boolean} */
                              exists: false;
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getUsersCount: {
        parameters: {
            query?: {
                /** @description The param should take an array of comma seperated strings */
                includeRecipeIds?: components["parameters"]["includeRecipeIds"];
                /** @description if set to true, will count users across all tenants in the app */
                includeAllTenants?: boolean;
            };
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get number of users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        /** @example 1000000 */
                        count?: number;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getActiveUsersCount: {
        parameters: {
            query: {
                since: number;
            };
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get number of active users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        /** @example 100000 */
                        count?: number;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getUsers: {
        parameters: {
            query?: {
                /** @description The param should take an array of comma seperated strings */
                includeRecipeIds?: components["parameters"]["includeRecipeIds"];
                /** @example ZmE3YTA4NDEtY...MjM5MTgwMzIyMzE= */
                paginationToken?: components["parameters"]["paginationToken"];
                /** @example 1 */
                limit?: components["parameters"]["limit"];
                timeJoinedOrder?: components["parameters"]["timeJoinedOrder"];
                email?: string;
                phone?: number;
                recipe?: string;
                provider?: string;
            };
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Pagination */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        users?: {
                            user?: components["schemas"]["authRecipeUser"];
                        }[];
                        nextPaginationToken?: components["schemas"]["paginationToken"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId: components["schemas"]["userId"];
                    /** @example true */
                    removeAllLinkedAccounts?: boolean;
                };
            };
        };
        responses: {
            /** @description Returns OK if the operation succeeded (even if the user didn't exist before the call) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            500: components["responses"]["500"];
        };
    };
    getSearchTags: {
        parameters: {
            query?: never;
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns available tags for search */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        tags?: string[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getFeatureFlag: {
        parameters: {
            query?: never;
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        /** @example [
                         *       "feature_1",
                         *       "feature_2"
                         *     ] */
                        features?: string[];
                        usageStats?: Record<string, unknown>;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getLicense: {
        parameters: {
            query?: never;
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example eyJhbGciOiJIUzI1NiIsIn... */
                              licenseKey?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "NO_LICENSE_KEY_FOUND_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            500: components["responses"]["500"];
        };
    };
    setLicense: {
        parameters: {
            query?: never;
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example eyJhbGciOiJIUzI1NiIsIn... */
                    licenseKey?: string;
                };
            };
        };
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                          }
                        | {
                              /** @enum {string} */
                              status: "MISSING_EE_FOLDER_ERROR";
                          }
                        | {
                              /** @enum {string} */
                              status: "INVALID_LICENSE_KEY_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            500: components["responses"]["500"];
        };
    };
    deleteLicense: {
        parameters: {
            query?: never;
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            500: components["responses"]["500"];
        };
    };
    getUserId: {
        parameters: {
            query?: {
                userId?: components["parameters"]["userId"];
            };
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              user?: components["schemas"]["authRecipeUser"];
                          }
                        | {
                              /** @enum {string} */
                              status: "UNKNOWN_USER_ID_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getUsersByAccountInfo: {
        parameters: {
            query: {
                email?: string;
                phoneNumber?: string;
                thirdPartyId?: string;
                thirdPartyUserId?: string;
                doUnionOfAccountInfo: boolean;
            };
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        users?: components["schemas"]["authRecipeUser"][];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getRequestsStats: {
        parameters: {
            query?: never;
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The operation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        /** @example 16382348 */
                        atMinute?: number;
                        averageRequestsPerSecond?: number[];
                        peakRequestsPerSecond?: number[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createOrUpdateConnectionURIDomainPUT: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example core-1234.supertokens.io:3567 */
                    connectionUriDomain: string;
                } & components["schemas"]["tenantInput"];
            };
        };
        responses: {
            /** @description Create or Update connection uri domain result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        createdNew: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createOrUpdateConnectionURIDomainV2PUT: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example core-1234.supertokens.io:3567 */
                    connectionUriDomain: string;
                } & components["schemas"]["tenantInputV2"];
            };
        };
        responses: {
            /** @description Create or Update connection uri domain result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        createdNew: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteConnectionUriDomainPOST: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example core-1234.supertokens.io:3567 */
                    connectionUriDomain: string;
                };
            };
        };
        responses: {
            /** @description Remove connection uri domain result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        didExist: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    connectionUriDomainListGET: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of connection uri domains */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        connectionUriDomains: {
                            /** @example core-1234.supertokens.io:3567 */
                            connectionUriDomain?: string;
                            apps?: {
                                /** @example app1 */
                                appId?: string;
                                tenants?: components["schemas"]["tenantConfig"][];
                            }[];
                        }[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    connectionUriDomainListV2GET: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of connection uri domains */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        connectionUriDomains: {
                            /** @example core-1234.supertokens.io:3567 */
                            connectionUriDomain?: string;
                            apps?: {
                                /** @example app1 */
                                appId?: string;
                                tenants?: components["schemas"]["tenantConfigV2"][];
                            }[];
                        }[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createOrUpdateAppPUT: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example app1 */
                    appId: string;
                } & components["schemas"]["tenantInput"];
            };
        };
        responses: {
            /** @description Create or Update app result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        createdNew: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createOrUpdateAppV2PUT: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example app1 */
                    appId: string;
                } & components["schemas"]["tenantInputV2"];
            };
        };
        responses: {
            /** @description Create or Update app result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        createdNew: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteAppPOST: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example app1 */
                    appId: string;
                };
            };
        };
        responses: {
            /** @description Remove app result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        didExist: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    appListGET: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of apps */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        apps: {
                            /** @example app1 */
                            appId?: string;
                            tenants?: components["schemas"]["tenantConfig"][];
                        }[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    appListV2GET: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of apps */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        apps: {
                            /** @example app1 */
                            appId?: string;
                            tenants?: components["schemas"]["tenantConfigV2"][];
                        }[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createOrUpdateTenantPUT: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    tenantId: components["schemas"]["tenantId"];
                } & components["schemas"]["tenantInput"];
            };
        };
        responses: {
            /** @description Create or Update tenant result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        createdNew: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createOrUpdateTenantV2PUT: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    tenantId: components["schemas"]["tenantId"];
                } & components["schemas"]["tenantInputV2"];
            };
        };
        responses: {
            /** @description Create or Update tenant result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        createdNew: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    tenantConfigGet: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tenant config result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | ({
                              status: components["schemas"]["statusOK"];
                          } & components["schemas"]["tenantConfig"])
                        | {
                              /** @enum {string} */
                              status: "TENANT_NOT_FOUND_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    tenantConfigV2Get: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tenant config result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | ({
                              status: components["schemas"]["statusOK"];
                          } & components["schemas"]["tenantConfigV2"])
                        | {
                              /** @enum {string} */
                              status: "TENANT_NOT_FOUND_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    tenantCoreConfigForDashboardGET: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tenant core config result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        config: {
                            /** @example password_reset_token_lifetime */
                            key?: string;
                            /**
                             * @example number
                             * @enum {string|null}
                             */
                            valueType?: "string" | "number" | "boolean" | null;
                            /** @example 3600000 */
                            value?: (string | number | boolean) | null;
                            /** @example Time in milliseconds for how long a password reset token / link is valid for. [Default: 3600000 (1 hour)] */
                            description?: string;
                            isDifferentAcrossTenants?: boolean;
                            possibleValues?: string[] | null;
                            /** @example false */
                            isNullable?: boolean;
                            /** @example 3600000 */
                            defaultValue?: (string | number | boolean) | null;
                            /** @example false */
                            isPluginProperty?: boolean;
                            /** @example false */
                            isPluginPropertyEditable?: boolean;
                        }[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteTenantPOST: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    tenantId: components["schemas"]["tenantId"];
                };
            };
        };
        responses: {
            /** @description Remove tenant result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        didExist: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    tenantListGET: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of tenants */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        tenants: components["schemas"]["tenantConfig"][];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    tenantListV2GET: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of tenants */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        tenants: components["schemas"]["tenantConfigV2"][];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createOrUpdateTenantConfigPUT: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    config: components["schemas"]["thirdPartyProviderConfig"];
                    /** @example false */
                    skipValidation?: boolean;
                };
            };
        };
        responses: {
            /** @description Create or Update result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        createdNew: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteTenantConfigPOST: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    thirdPartyId: components["schemas"]["thirdPartyId"];
                };
            };
        };
        responses: {
            /** @description Remove thirdParty config result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        didConfigExist?: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    addUserToTenant: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    recipeUserId: components["schemas"]["userId"];
                };
            };
        };
        responses: {
            /** @description Association result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              wasAlreadyAssociated: boolean;
                          }
                        | {
                              /** @enum {string} */
                              status:
                                  | "UNKNOWN_USER_ID_ERROR"
                                  | "EMAIL_ALREADY_EXISTS_ERROR"
                                  | "PHONE_NUMBER_ALREADY_EXISTS_ERROR"
                                  | "THIRD_PARTY_USER_ALREADY_EXISTS_ERROR";
                          }
                        | {
                              /** @enum {string} */
                              status: "ASSOCIATION_NOT_ALLOWED_ERROR";
                              reason?: string;
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    removeUserFromTenant: {
        parameters: {
            query?: never;
            header?: {
                /** @example multitenancy */
                rid?: components["parameters"]["multitenancyRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    recipeUserId: components["schemas"]["userId"];
                };
            };
        };
        responses: {
            /** @description Disassociation result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        wasAssociated: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getOAuth2Client: {
        parameters: {
            query: {
                /** @example abcd */
                clientId: string;
            };
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth2 Client Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | ({
                              status: components["schemas"]["statusOK"];
                          } & components["schemas"]["oauthClient"])
                        | components["schemas"]["oauthError"]
                        | {
                              /** @enum {string} */
                              status: "CLIENT_NOT_FOUND_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    updateOAuth2Client: {
        parameters: {
            query?: never;
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["oauthClient"];
            };
        };
        responses: {
            /** @description OAuth2 Client Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | ({
                              status: components["schemas"]["statusOK"];
                          } & components["schemas"]["oauthClient"])
                        | components["schemas"]["oauthError"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    createOAuth2Client: {
        parameters: {
            query?: never;
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["oauthClient"];
            };
        };
        responses: {
            /** @description OAuth2 Client Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | ({
                              status: components["schemas"]["statusOK"];
                          } & components["schemas"]["oauthClient"])
                        | components["schemas"]["oauthError"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    listOAuth2Clients: {
        parameters: {
            query?: {
                pageSize?: number;
                pageToken?: string;
                clientName?: string;
            };
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth2 Client Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              clients?: components["schemas"]["oauthClient"][];
                              nextPaginationToken?: string;
                          }
                        | components["schemas"]["oauthError"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    removeOAuth2Client: {
        parameters: {
            query?: never;
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example stcl_c6dd9189-33b8-4ec0-8aea-a0ffdaf75fcb */
                    clientId?: string;
                };
            };
        };
        responses: {
            /** @description OAuth2 Client Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example true */
                              didExist?: boolean;
                          }
                        | components["schemas"]["oauthError"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getOAuth2ConsentRequest: {
        parameters: {
            query: {
                consentChallenge: string;
            };
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth2 Consent Request Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        client?: components["schemas"]["oauthClient"];
                        requestedScope?: string[];
                        requestedAudience?: string[];
                        requestedClaims?: {
                            idToken?: {
                                property1?: string;
                                property2?: string;
                            };
                        };
                        loginHint?: string;
                        uiLocales?: string[];
                        acrValues?: string[];
                        subject?: string;
                        requestUrl?: string;
                        skip?: boolean;
                        clientId?: string;
                        redirectUri?: string;
                        forceSubjectIdentifier?: string;
                        requestedAccessTokenAudience?: string[];
                        context?: Record<string, unknown>;
                        sessionId?: string;
                        loginSessionId?: string;
                        loginChallenge?: string;
                        loginRequestedAt?: string;
                        consentRequestedAt?: string;
                        consentChallenge?: string;
                        consentSkip?: boolean;
                        consentRemember?: boolean;
                        consentRememberFor?: number;
                        consentError?: {
                            name?: string;
                            description?: string;
                        };
                        consentErrorDebug?: string;
                        consentErrorDescription?: string;
                        consentErrorHint?: string;
                        consentErrorCode?: string;
                        consentStatusCode?: number;
                        sessionIdToken?: {
                            property1?: string;
                            property2?: string;
                        };
                        sessionAccessToken?: {
                            property1?: string;
                            property2?: string;
                        };
                        sessionToken?: {
                            property1?: string;
                            property2?: string;
                        };
                        acr?: string;
                        amr?: string[];
                        challenge: string;
                        oidcContext?: Record<string, unknown>;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    acceptOAuth2ConsentRequest: {
        parameters: {
            query: {
                consentChallenge: string;
            };
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    context?: Record<string, unknown>;
                    grantAccessTokenAudience?: string[];
                    grantScope?: string[];
                    /**
                     * Format: date-time
                     * @example 2019-08-24T14:15:22Z
                     */
                    handledAt?: string;
                    remember?: boolean;
                    rememberFor?: number;
                    session?: {
                        accessToken?: {
                            [key: string]: unknown;
                        };
                        idToken?: {
                            [key: string]: unknown;
                        };
                    };
                    iss?: string;
                    tId?: string;
                    rsub?: string;
                    sessionHandle?: string;
                    initialAccessTokenPayload?: Record<string, unknown>;
                    initialIdTokenPayload?: Record<string, unknown>;
                };
            };
        };
        responses: {
            /** @description OAuth2 Consent Request Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        /** @example {apiDomain}/oauth/consent?... */
                        redirectTo?: string;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    rejectOAuth2ConsentRequest: {
        parameters: {
            query: {
                consentChallenge: string;
            };
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    error?: string;
                    errorDebug?: string;
                    errorDescription?: string;
                    errorHint?: string;
                    /** @example 400 */
                    statusCode?: number;
                };
            };
        };
        responses: {
            /** @description OAuth2 Consent Request Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        /** @example {apiDomain}/oauth/consent?... */
                        redirectTo?: string;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getOAuth2LoginRequest: {
        parameters: {
            query: {
                loginChallenge: string;
            };
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth2 Login Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              challenge?: string;
                              client?: components["schemas"]["oauthClient"];
                              requestUrl: string;
                              requestedAccessTokenAudience?: string[];
                              requestedScope?: string[];
                              sessionId?: string;
                              skip?: boolean;
                              subject?: string;
                              oidcContext?: {
                                  acrValues?: string[];
                                  display?: string;
                                  idTokenHintClaims?: Record<string, unknown>;
                                  loginHint?: string;
                                  uiLocales?: string[];
                                  requestUrl?: string;
                                  requestedAccessTokenAudience?: string[];
                                  requestedScope?: string[];
                                  sessionId?: string;
                                  skip?: boolean;
                                  subject?: string;
                              };
                          }
                        | components["schemas"]["oauthError"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    acceptOAuth2LoginRequest: {
        parameters: {
            query: {
                loginChallenge: string;
            };
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    acr?: string;
                    amr?: string[];
                    context?: string | null;
                    /** @example true */
                    extendSessionLifespan?: boolean;
                    forceSubjectIdentifier?: string;
                    identityProviderSessionId?: string;
                    /** @example true */
                    remember?: boolean;
                    /** @example 0 */
                    rememberFor?: number;
                    subject: string;
                };
            };
        };
        responses: {
            /** @description OAuth2 Login Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        /** @example {apiDomain}/oauth/login?... */
                        redirectTo?: string;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    rejectOAuth2LoginRequest: {
        parameters: {
            query: {
                loginChallenge: string;
            };
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    error?: string;
                    errorDebug?: string;
                    errorDescription?: string;
                    errorHint?: string;
                    /** @example 0 */
                    statusCode?: number;
                };
            };
        };
        responses: {
            /** @description OAuth2 Login Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        /** @example {apiDomain}/oauth/login?... */
                        redirectTo?: string;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    acceptOAuth2LogoutRequest: {
        parameters: {
            query?: never;
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    challenge?: string;
                };
            };
        };
        responses: {
            /** @description OAuth2 Logout Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example {apiDomain}/oauth/logout?... */
                              redirectTo?: string;
                          }
                        | components["schemas"]["oauthError"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    rejectOAuth2LogoutRequest: {
        parameters: {
            query?: never;
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    challenge?: string;
                };
            };
        };
        responses: {
            /** @description OAuth2 Logout Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                          }
                        | components["schemas"]["oauthError"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    revokeOAuth2Session: {
        parameters: {
            query?: never;
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    sessionHandle?: string;
                };
            };
        };
        responses: {
            /** @description OAuth2 Session Revocation Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example true */
                              didExist?: boolean;
                          }
                        | components["schemas"]["oauthError"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    revokeOAuth2Token: {
        parameters: {
            query?: never;
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    token?: string;
                };
            };
        };
        responses: {
            /** @description OAuth2 Token Revocation Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example true */
                              didExist?: boolean;
                          }
                        | components["schemas"]["oauthError"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    revokeOAuth2Tokens: {
        parameters: {
            query?: never;
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example stcl_fed7cff0-cc6e-406e-b7a6-766148675a4a */
                    clientId?: string;
                };
            };
        };
        responses: {
            /** @description OAuth2 Token Revocation Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example true */
                              didExist?: boolean;
                          }
                        | components["schemas"]["oauthError"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getOAuth2Auth: {
        parameters: {
            query?: never;
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth2 Auth Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | ({
                              status: components["schemas"]["statusOK"];
                          } & components["schemas"]["oauthClient"])
                        | components["schemas"]["oauthError"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    postOAuth2Auth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    params: Record<string, unknown>;
                    iss: string;
                    cookies?: string;
                    session?: {
                        idToken?: Record<string, unknown>;
                        accessToken?: Record<string, unknown>;
                    };
                };
            };
        };
        responses: {
            /** @description OAuth2 auth result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              redirectTo: string;
                              cookies: string[];
                          }
                        | components["schemas"]["oauthError"]
                        | {
                              /** @enum {string} */
                              status: "CLIENT_NOT_FOUND_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getOAuth2Token: {
        parameters: {
            query?: never;
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example https://api.auth.com */
                    iss?: string;
                    /** @example {} */
                    inputBody?: Record<string, unknown>;
                    /** @example false */
                    useStaticSigningKey?: boolean;
                    /** @example Bearer 1234567890 */
                    authorizationHeader?: string;
                };
            };
        };
        responses: {
            /** @description OAuth2 Token Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example eyJraWQiOiJzLTBjZmVmMDdkLWQ2NDktNGIwOC04MTVjLWJkYjZlYTczNWQyZCIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJpYXQiOjE3NDAzODU5MzcsImV4cCI6MTc0MDM4OTUzOCwiY2xpZW50X2lkIjoic3RjbF82NWUwODc1Mi0yYzU5LTQ5NjQtOTM0Yy02OTIwZDJmMDZlNjIiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjMwMDEvYXV0aCIsImp0aSI6Ijc1NTc2MmFmLTUwYTUtNDc1ZS04YWRkLTg3MDA1ZmU3YWJlNiIsIm5iZiI6MTc0MDM4NTkzNywic2NwIjpbIm9wZW5pZCIsIm9mZmxpbmVfYWNjZXNzIl0sInN1YiI6InNvbWV1c2VyaWQiLCJzdHQiOjEsImdpZCI6ImRjOGQ0OGUzLTcwOTgtNDhhNi1hYjU0LTgxMWMyODQ4N2I4MiIsInRJZCI6InB1YmxpYyIsInJzdWIiOiJzb21ldXNlcmlkIiwic2Vzc2lvbkhhbmRsZSI6InNlc3Npb24taGFuZGxlIn0.DgVgtD2gXgzHrDsC2lIUBa-wsYm8KO4Pg8L1Ov3aSBVgjwtjiCO40ldjBZ9qKdQBq5Qqk0ElAZNj6Bzc40ESfQumLH3_N2XtOj568s71JPuEOIg5hs9XAdK4vYfXMhVQRWn9iPUKHKrpRVf73IIH0mpkN8i6_MhcDoMMOuG5XPlXajG9VOyoY_5saHA61-uTafZLdAgKqnmYGvS8KmNEcEbBWLGwFB4QQKiDAUvatIi5n3juFBUxyt9t6DrqT1D04shesRppa0XhCZbCFBv1dixSrprdtqKhlPOrMgvOGNZ3cBLbYBOG9zoJRD5YlVMGw-j_pE7IbvpDWKL7tTJS1Q */
                              access_token: string;
                              /** @example 3599 */
                              expires_in?: number;
                              /** @example eyJraWQiOiJzLTBjZmVmMDdkLWQ2NDktNGIwOC04MTVjLWJkYjZlYTczNWQyZCIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJpYXQiOjE3NDAzODU5MzgsImV4cCI6MTc0MDM4OTUzOCwiYXRfaGFzaCI6IkNxOGNCSk01Nm5FcG9aaWREcnZvLVEiLCJhdWQiOiJzdGNsXzY1ZTA4NzUyLTJjNTktNDk2NC05MzRjLTY5MjBkMmYwNmU2MiIsImF1dGhfdGltZSI6MTc0MDM4NTkzNywiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDozMDAxL2F1dGgiLCJqdGkiOiIxZDA5OGUxZi04ZGIxLTQyNzUtYmMzYS0zYTA4NjdjOWE2NTAiLCJyYXQiOjE3NDAzODU3MzEsInNpZCI6InNlc3Npb24taGFuZGxlIiwic3ViIjoic29tZXVzZXJpZCIsInN0dCI6MiwiZ2lkIjoiYzk1OTVjYjItMWFjOS00MDI0LWFjNjMtNDJlZDEyODliY2RmIn0.PGsemf1qpLF-cE_616NHvKsRmanFiyba0yqF2j5fy87AWD5McI405A4eqi-wAlKsDxC-MPpuW8bx-08YUhs3x6ku4aFaDyA-M-Xhc65fJJ4SCPVaUL7qlUwl7wJwNs2rMRW3Ayyj4MDSlW5uqm39_K_bBqod2Qj1yqck-N0g78qh86uEcyX6Al3d5KSln1B21nwDsEgegk3xzE8lFMCQUTpZEYb5-1v2D0Bu_PblBfOCjA6mBtT1IIQkmSE27FvkTUS1H50EUyhFP4JH30kP3bUnQ9pOqGMTe405N2ruKtPyWsXHLPlQ4hcJCLO5GT5ZgtUjfz6Y3mCM9l69uDYDHg */
                              id_token?: string;
                              /** @example st_rt_d7LI9mGYHF2TAaVEFJi7fqOWo8ZQ8zEGpuxhHQs0R18.UZ0nbTuuYuDD8G54PCD8AKHdsh9cezu8BTxVlTy7pYw */
                              refresh_token?: string;
                              /** @example openid offline_access */
                              scope?: string;
                              /** @example bearer */
                              token_type?: string;
                          }
                        | components["schemas"]["oauthError"]
                        | {
                              /** @enum {string} */
                              status: "CLIENT_NOT_FOUND_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getOAuth2SessionsLogout: {
        parameters: {
            query?: {
                clientId?: string;
                idTokenHint?: string;
                postLogoutRedirectUri?: string;
                state?: string;
            };
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth2 Sessions Logout Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example {apiDomain}/oauth/logout?... */
                              redirectTo?: string;
                          }
                        | components["schemas"]["oauthError"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    introspectOAuth2Token: {
        parameters: {
            query?: never;
            header?: {
                /** @example oauth */
                rid?: components["parameters"]["oauthRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    token: string;
                    scope?: string;
                };
            };
        };
        responses: {
            /** @description OAuth2 Token Introspection Result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        active?: boolean;
                        /** @example 1740992368 */
                        iat?: number;
                        /** @example 1740995969 */
                        exp?: number;
                        /** @example stcl_fed7cff0-cc6e-406e-b7a6-766148675a4a */
                        client_id?: string;
                        /** @example http://localhost:3001/auth */
                        iss?: string;
                        /** @example 1c229efe-c55b-44c1-98cf-9fa3a366502e */
                        jti?: string;
                        /** @example 1740992368 */
                        nbf?: number;
                        /** @example [
                         *       "openid",
                         *       "offline_access"
                         *     ] */
                        scp?: string[];
                        /** @example 137d053d-0d69-4dea-8a19-06ddbdfa4f96 */
                        sub?: string;
                        /** @example 1 */
                        stt?: number;
                        /** @example 87bcc2d8-f159-4e10-a097-0898179a2d7d */
                        sessionHandle?: string;
                        /** @example 137d053d-0d69-4dea-8a19-06ddbdfa4f96 */
                        rsub?: string;
                        /** @example public */
                        tId?: string;
                        /** @example 575b7130-d982-4945-be49-3ecde2a49eaa */
                        gid?: string;
                        /** @example Bearer */
                        token_type?: string;
                        /** @example access_token */
                        token_use?: string;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            402: components["responses"]["402"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getBulkImportUsers: {
        parameters: {
            query?: {
                /** @example ZmE3YTA4NDEtY...MjM5MTgwMzIyMzE= */
                paginationToken?: components["parameters"]["paginationToken"];
                /** @example 1 */
                limit?: components["parameters"]["limit"];
                status: components["parameters"]["bulkImportUserStatus"];
            };
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated Bulk Import Users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        users?: components["schemas"]["bulkImportUserResponse"][];
                        nextPaginationToken?: components["schemas"]["paginationToken"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    addBulkImportUsers: {
        parameters: {
            query?: never;
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    users: components["schemas"]["bulkImportUser"][];
                };
            };
        };
        responses: {
            /** @description Bulk Import Users added successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        users?: components["schemas"]["addBulkImportUserResponse"];
                    };
                };
            };
            /** @description One or more users have invalid schema */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Data has missing or invalid fields. Please check the users field for more details. */
                        error?: string;
                        users?: {
                            /**
                             * @description Index of the user in the users array that has invalid schema
                             * @example 0
                             */
                            index?: number;
                            errors?: string[];
                        }[];
                    };
                };
            };
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    deleteBulkImportUsers: {
        parameters: {
            query?: never;
            header?: {
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description List of bulk import user ids to be deleted */
                    ids: components["schemas"]["bulkImportUserId"][];
                };
            };
        };
        responses: {
            /** @description Bulk Import Users deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description List of ids that were successfully deleted */
                        deletedIds?: components["schemas"]["bulkImportUserId"][];
                        /**
                         * @description List of ids that were invalid
                         * @example []
                         */
                        invalidIds?: components["schemas"]["bulkImportUserId"][];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getWebAuthNCredential: {
        parameters: {
            query: {
                recipeUserId: string;
                webauthnCredentialId: string;
            };
            header?: {
                /** @example webauthn */
                rid?: components["parameters"]["webauthnRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description WebAuthn credential result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example ea7a0931-b533-4478-9253-0fde890ca23 */
                              webauthnCredentialId?: string;
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              recipeUserId?: string;
                              /** @example example.com */
                              relyingPartyId?: string;
                              /** @example 1741793746 */
                              createdAt?: number;
                          }
                        | {
                              /** @enum {string} */
                              status: "CREDENTIAL_NOT_FOUND_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    listWebAuthNCredentials: {
        parameters: {
            query: {
                recipeUserId: string;
            };
            header?: {
                /** @example webauthn */
                rid?: components["parameters"]["webauthnRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description WebAuthn credentials list result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        credentials?: {
                            /** @example ea7a0931-b533-4478-9253-0fde890ca23 */
                            webauthnCredentialId: string;
                            /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                            recipeUserId: string;
                            /** @example example.com */
                            relyingPartyId: string;
                            /** @example 1741793746 */
                            createdAt: number;
                            /** @example 1741793746 */
                            updatedAt?: number;
                        }[];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    getWebAuthNOptions: {
        parameters: {
            query: {
                webauthnGeneratedOptionsId: string;
            };
            header?: {
                /** @example webauthn */
                rid?: components["parameters"]["webauthnRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description WebAuthn options result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: components["schemas"]["statusOK"];
                        /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                        webauthnGeneratedOptionsId?: string;
                        /** @example example.com */
                        relyingPartyId?: string;
                        /** @example Example */
                        relyingPartyName?: string;
                        /** @example TQvEVDV8B64w_2zIifzKaPzBPfthqpx2uJkq_2PIB0k */
                        challenge?: string;
                        /** @example 10000 */
                        timeout?: string;
                        /** @example http://example.com */
                        origin?: string;
                        /** @example email@example.com */
                        email?: string;
                        userVerification?: components["schemas"]["userVerification"];
                        /** @example true */
                        userPresence?: boolean;
                        /** @example 1741793746 */
                        createdAt?: number;
                        /** @example 1741793746 */
                        expiresAt?: number;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    recoverWebAuthNUser: {
        parameters: {
            query: {
                token: string;
            };
            header?: {
                /** @example webauthn */
                rid?: components["parameters"]["webauthnRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description AuthRecipeUser for the token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              recipeUserId?: string;
                              user?: components["schemas"]["authRecipeUser"];
                          }
                        | {
                              /** @enum {string} */
                              status: "RECOVER_ACCOUNT_TOKEN_INVALID_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    generateRegistrationOptions: {
        parameters: {
            query?: never;
            header?: {
                /** @example webauthn */
                rid?: components["parameters"]["webauthnRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    email: components["schemas"]["email"];
                    /** @example John Doe */
                    displayName?: string;
                    /** @example example.com */
                    relyingPartyId: string;
                    /** @example Example */
                    relyingPartyName: string;
                    /** @example http://example.com */
                    origin: string;
                    /** @example 10000 */
                    timeout?: number;
                    userVerification?: components["schemas"]["userVerification"];
                    /** @example false */
                    userPresence?: boolean;
                    /** @example none */
                    attestation?: string;
                    /** @example required */
                    residentKey?: string;
                    supportedAlgorithmIds?: number[];
                };
            };
        };
        responses: {
            /** @description The generated register options response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              webauthnGeneratedOptionsId?: string;
                              rp?: {
                                  /** @example example.com */
                                  id?: string;
                                  /** @example Example */
                                  name?: string;
                              };
                              user?: {
                                  /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                                  id?: string;
                                  /** @example John Doe */
                                  name?: string;
                                  /** @example John Doe */
                                  displayName?: string;
                              };
                              email?: components["schemas"]["email"];
                              /** @example TQvEVDV8B64w_2zIifzKaPzBPfthqpx2uJkq_2PIB0k */
                              challenge?: string;
                              /** @example 10000 */
                              timeout?: number;
                              /** @example none */
                              attestation?: string;
                              /** @example 1741793746 */
                              createdAt?: number;
                              /** @example 1741793746 */
                              expiresAt?: number;
                              pubKeyCredParams?: {
                                  /** @example public-key */
                                  type?: string;
                                  /** @example -7 */
                                  alg?: number;
                              }[];
                              excludeCredentials?: {
                                  /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                                  id?: string;
                                  transport?: string[];
                              }[];
                              authenticatorSelection?: {
                                  userVerification?: components["schemas"]["userVerification"];
                                  /** @example true */
                                  requireResidentKey?: boolean;
                              };
                          }
                        | {
                              /** @enum {string} */
                              status: "INVALID_OPTIONS_ERROR";
                              reason?: string;
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    generateSigninOptions: {
        parameters: {
            query?: never;
            header?: {
                /** @example webauthn */
                rid?: components["parameters"]["webauthnRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example example.com */
                    relyingPartyId: string;
                    /** @example Example */
                    relyingPartyName: string;
                    /** @example http://example.com */
                    origin: string;
                    /** @example 10000 */
                    timeout?: number;
                    userVerification?: components["schemas"]["userVerification"];
                    /** @example false */
                    userPresence?: boolean;
                };
            };
        };
        responses: {
            /** @description AuthRecipeUser for the token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              webauthnGeneratedOptionsId?: string;
                              /** @example example.com */
                              relyingPartyId?: string;
                              /** @example TQvEVDV8B64w_2zIifzKaPzBPfthqpx2uJkq_2PIB0k */
                              challenge?: string;
                              /** @example 10000 */
                              timeout?: number;
                              userVerification?: components["schemas"]["userVerification"];
                              /** @example true */
                              userPresence?: boolean;
                              /** @example 1741793746 */
                              createdAt?: string;
                              /** @example 1741793746 */
                              expiresAt?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "INVALID_OPTIONS_ERROR";
                              reason?: string;
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    registerWebAuthNCredential: {
        parameters: {
            query?: never;
            header?: {
                /** @example webauthn */
                rid?: components["parameters"]["webauthnRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    recipeUserId?: components["schemas"]["userId"];
                    /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                    webauthnGeneratedOptionsId?: string;
                    /** @description Credential returned by the browser */
                    credential?: Record<string, unknown>;
                };
            };
        };
        responses: {
            /** @description The stored credential */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              webauthnCredentialId?: string;
                              /** @example example.com */
                              relyingPartyId?: string;
                              /** @example Example */
                              relyingPartyName?: string;
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              recipeUserId?: string;
                              email?: components["schemas"]["email"];
                          }
                        | {
                              /** @enum {string} */
                              status: "INVALID_AUTHENTICATOR_ERROR";
                              reason?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "OPTIONS_NOT_FOUND_ERROR" | "INVALID_CREDENTIALS_ERROR" | "INVALID_OPTIONS_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    signUpWebAuthNUser: {
        parameters: {
            query?: never;
            header?: {
                /** @example webauthn */
                rid?: components["parameters"]["webauthnRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                    webauthnGeneratedOptionsId?: string;
                    /** @description Credential returned by the browser */
                    credential?: Record<string, unknown>;
                };
            };
        };
        responses: {
            /** @description The signup result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              webauthnCredentialId?: string;
                              /** @example example.com */
                              relyingPartyId?: string;
                              /** @example Example */
                              relyingPartyName?: string;
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              recipeUserId?: string;
                              user?: components["schemas"]["authRecipeUser"];
                          }
                        | {
                              /** @enum {string} */
                              status:
                                  | "INVALID_OPTIONS_ERROR"
                                  | "INVALID_AUTHENTICATOR_ERROR"
                                  | "INVALID_CREDENTIALS_ERROR";
                              reason?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "OPTIONS_NOT_FOUND_ERROR" | "EMAIL_ALREADY_EXISTS_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    signInWebAuthNUser: {
        parameters: {
            query?: never;
            header?: {
                /** @example webauthn */
                rid?: components["parameters"]["webauthnRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                    webauthnGeneratedOptionsId?: string;
                    /** @description Credential returned by the browser */
                    credential?: Record<string, unknown>;
                };
            };
        };
        responses: {
            /** @description The stored credential */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example fa7a0841-b533-4478-9253-0fde890c576 */
                              recipeUserId?: string;
                              user?: components["schemas"]["authRecipeUser"];
                          }
                        | {
                              /** @enum {string} */
                              status:
                                  | "INVALID_OPTIONS_ERROR"
                                  | "INVALID_AUTHENTICATOR_ERROR"
                                  | "INVALID_CREDENTIALS_ERROR";
                              reason?: string;
                          }
                        | {
                              /** @enum {string} */
                              status:
                                  | "OPTIONS_NOT_FOUND_ERROR"
                                  | "CREDENTIAL_NOT_FOUND_ERROR"
                                  | "UNKNOWN_USER_ID_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    generateTokenForRecovery: {
        parameters: {
            query?: never;
            header?: {
                /** @example webauthn */
                rid?: components["parameters"]["webauthnRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    userId: components["schemas"]["userId"];
                    email: components["schemas"]["email"];
                };
            };
        };
        responses: {
            /** @description WebAuthn options result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              /** @example ZmE3YTA4NDEtYjUzMy00NDc4LTkyNTMtMGZkZTg5MGM1NzY */
                              token?: string;
                          }
                        | {
                              /** @enum {string} */
                              status: "UNKNOWN_USER_ID_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    consumeWebAuthNToken: {
        parameters: {
            query?: never;
            header?: {
                /** @example webauthn */
                rid?: components["parameters"]["webauthnRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example ZmE3YTA4NDEtYjUzMy00NDc4LTkyNTMtMGZkZTg5MGM1NzY */
                    token: string;
                };
            };
        };
        responses: {
            /** @description Consume token result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                              userId?: components["schemas"]["userId"];
                              email?: components["schemas"]["email"];
                          }
                        | {
                              /** @enum {string} */
                              status: "RECOVER_ACCOUNT_TOKEN_INVALID_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    updateEmail: {
        parameters: {
            query?: never;
            header?: {
                /** @example webauthn */
                rid?: components["parameters"]["webauthnRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    recipeUserId: components["schemas"]["userId"];
                    email: components["schemas"]["email"];
                };
            };
        };
        responses: {
            /** @description Update email result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                          }
                        | {
                              /** @enum {string} */
                              status: "UNKNOWN_USER_ID_ERROR" | "EMAIL_ALREADY_EXISTS_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    removeWebAuthNCredential: {
        parameters: {
            query: {
                recipeUserId: string;
                webauthnCredentialId: string;
            };
            header?: {
                /** @example webauthn */
                rid?: components["parameters"]["webauthnRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete credential result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                          }
                        | {
                              /** @enum {string} */
                              status: "CREDENTIAL_NOT_FOUND_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    removeWebAuthNOptions: {
        parameters: {
            query: {
                webauthnGeneratedOptionsId: string;
            };
            header?: {
                /** @example webauthn */
                rid?: components["parameters"]["webauthnRid"];
                /** @example ajs30Nlbs0DjvsdFIne934n8NVee5n */
                Authorization?: components["parameters"]["api-key"];
                /**
                 * @description X.Y of the X.Y.Z CDI version.
                 * @example 5.2
                 */
                "cdi-version"?: components["parameters"]["cdi-version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete options result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | {
                              status: components["schemas"]["statusOK"];
                          }
                        | {
                              /** @enum {string} */
                              status: "OPTIONS_NOT_FOUND_ERROR";
                          };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
}
